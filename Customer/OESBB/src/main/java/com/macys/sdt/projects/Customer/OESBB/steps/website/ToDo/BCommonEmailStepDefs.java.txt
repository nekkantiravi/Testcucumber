package com.macys.sdt.projects.Customer.OESBB.steps.website.bcommon;

import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Matcher;

import org.apache.commons.lang3.StringUtils;
import org.json.JSONObject;
import org.junit.Assert;
import org.openqa.selenium.WebElement;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.macys.sdt.projects.Customer.OESBB.utils.runner.BCOMBaseTest;
import com.macys.sdt.projects.Customer.OESBB.utils.Utilities;
import com.macys.sdt.projects.Customer.OESBB.utils.webdriver.Browser;


import cucumber.api.java.en.And;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

import javax.management.Attribute;

public class BCommonEmailStepDefs extends BCOMBaseTest {
	private static final BCommonEmailStepDefs bCommonEmailStepDefs = new BCommonEmailStepDefs();

	private BCommonEmailStepDefs() {}

	public static BCommonEmailStepDefs getInstance() {
		return bCommonEmailStepDefs;
	}

	@Then("^i should see bloomingdales logo$")
	public void i_should_see_bloomingdales_logo() throws Throwable {
		Assert.assertTrue(bcomemailpage.logoBloomingdales.isDisplayed());
	}

	@Then("^i should see bloomindales logo$")
	public void i_should_see_bloomindales_logo() throws Throwable {
		Assert.assertTrue(bcomemailpage.bloomingdalesLogo.isDisplayed());
	}
	
	@And("^i should see store name$")
	public void i_should_see_store_name() throws Throwable {

		Assert.assertTrue(
				"Store Name is not matching with the expected value",
				bcomemailpage
						.getstoreAddress()
						.toLowerCase()
						.contains(
								enhancedPayloadActual.getTriggerData().get(0)
										.getShipmentsData().get(0)
										.getStoreName().trim().toLowerCase()));

	}

	@Then("^i should see estimated pick up date$")
	public void i_should_see_estimated_pickup_date() throws Throwable {
		String labelText = bcomemailpage.getAllLabels();

		DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
		Date pickupReadyDate = (Date) formatter.parse(enhancedPayloadActual
				.getTriggerData().get(0).getShipmentsData().get(0)
				.getPickupReadyDate());
		Date orderDate = (Date) formatter.parse(enhancedPayloadActual
				.getTriggerData().get(0).getOrderData().getOrderCapturedDate());
		String pattern = ", EEEEE, MMMMM dd";
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
		if (pickupReadyDate.equals(orderDate)) {
			String date = "Today" + simpleDateFormat.format(pickupReadyDate)
					+ "  " + "typically ready in 2 hours";
			Assert.assertTrue(
					"Store pickup date is not matching with the expected value",
					labelText.contains(("Today"
							+ simpleDateFormat.format(pickupReadyDate) + "  " + "Typically ready in 2 hours")
							.toLowerCase()));
		}

		else {

			String date = "Tomorrow" + simpleDateFormat.format(pickupReadyDate);
			Assert.assertTrue(
					"Store pickup date is not matching with the expected value",
					labelText.contains(("Tomorrow" + simpleDateFormat
							.format(pickupReadyDate)).toLowerCase()));
		}

	}

	@Then("^i should see customer care static text$")
	public void i_should_see_customer_care_static_text(String statictext)
			throws Throwable {

		String labelText = bcomemailpage.getAllLabels();
		Assert.assertTrue(
				"Customer care text is not matching with the expected value",
				labelText.contains(statictext.toLowerCase().trim()));
	}

	@Then("^i should see pickup instore items$")
	public void i_should_see_pickup_instore_items() throws Throwable {

		String labelText = bcomemailpage.getAllLabels();

		int itemSize = enhancedPayloadActual.getTriggerData().get(0)
				.getShipmentsData().get(0).getShipitems().size();
		Assert.assertTrue(
				"pickup instore items is not matching with the expected value",
				labelText.contains("pick up in store:" + " " + itemSize + " "
						+ "item(s)"));
	}

	@Then("^i should see pickup person contact information:$")
	public void i_should_see_pickup_contact_information(
			String expectedContactInformationPickup) throws Throwable {
		expectedContactInformationPickup = expectedContactInformationPickup
				.replaceAll(
						"<shipmentsfirstname>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0).getFirstName())
				.replaceAll(
						"<shipmentslastname>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0).getLastName())
				.replaceAll(
						"<shipmentsemail>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0).getemail())
				.replaceAll(
						"<shipmentsphone>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0).getphone());

		Assert.assertTrue(
				"Contact Information not displaying as expected in the email",
				StringUtils.contains(
						bcomemailpage.getAllLabels()
								.replaceAll("\\r\\n|\\r|\\n", "")
								.replaceAll(",", "").replaceAll(" ", "")
								.toLowerCase().trim(),
						expectedContactInformationPickup.replaceAll(" ", "")
								.toLowerCase().trim()));
	}

	@Then("^i should see gift receipt option in fedfil mixbag order:$")
	public void i_should_see_gift_receipt_option_in_fedfil_mixbag_order(
			String giftReciept) throws Throwable {

		Assert.assertTrue(
				"Expected_'Gift_Receipt'_is_not_match_with_actual",
				StringUtils.contains(
						bcomemailpage.getAllLabels()
								.replaceAll("\\r\\n|\\r|\\n", "")
								.replaceAll(",", "").replaceAll(" ", "")
								.toLowerCase().trim(),
						giftReciept.replaceAll(" ", "").toLowerCase().trim()));
	}

	@Then("^i should see gift box option in fedfil mixbag order:$")
	public void i_should_see_gift_box_option_in_fedfil_mixbag_order(
			String giftBox) throws Throwable {

		Assert.assertTrue(
				"Expected_'Gift_Receipt'_is_not_match_with_actual",
				StringUtils.contains(
						bcomemailpage.getAllLabels()
								.replaceAll("\\r\\n|\\r|\\n", "")
								.replaceAll(",", "").replaceAll(" ", "")
								.toLowerCase().trim(),
						giftBox.replaceAll(" ", "").toLowerCase().trim()));
	}

	public String getShipmentMethod(String shipmentMethod) {

		String expectedShipmentMethod = null;
		

		try {

			float baseShippingFee = Float.parseFloat(enhancedPayloadActual
					.getTriggerData().get(0).getOrderTotalsData()
					.getBaseShippingAmt());

			if (shipmentMethod.equalsIgnoreCase("STANDARD")) {
				expectedShipmentMethod = "STANDARD";
			} else if (baseShippingFee > 0.0
					&& shipmentMethod.equalsIgnoreCase("STANDARD")) {

				expectedShipmentMethod = "Ground Shipping";
			} else if (shipmentMethod.equalsIgnoreCase("PREMIUM") && enhancedPayloadActual.getTriggerData().get(0)
					.getShipmentsData().get(0).getShipitems()
					.get(0).getFdIndicator() != null) {
				if(enhancedPayloadActual.getTriggerData().get(0)
					.getShipmentsData().get(0).getShipitems()
					.get(0).getFdIndicator().equals("R")){

				expectedShipmentMethod = "SHOPRUNNER FREE 2-DAY";
				}
			}
			else if (shipmentMethod.equalsIgnoreCase("PREMIUM")) {

				expectedShipmentMethod = "PREMIUM";
			} else if (shipmentMethod.equalsIgnoreCase("EXPRESS")) {

				expectedShipmentMethod = "EXPRESS";
			} else if (shipmentMethod.equalsIgnoreCase("Email")) {

				expectedShipmentMethod = "Email";
			} else if (shipmentMethod.equalsIgnoreCase("SAMEDAY")) {

				expectedShipmentMethod = "Same-Day Delivery";
			} else if (shipmentMethod.equalsIgnoreCase("No Hurry")) {

				expectedShipmentMethod = "No Hurry";
			}
		} catch (Exception e) {

			e.printStackTrace();
		}

		return expectedShipmentMethod;
	}

	private static String getModifiedYearFormat(String date) throws ParseException {
		SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
		Date d = formatter.parse(date);
		formatter.applyPattern("MM/dd/yy");
		return formatter.format(d).toString();
	}

	@Then("^i should see original form of tender$")
	public void i_should_see_original_form_of_tender() throws Throwable {
		Assert.assertEquals(
				"Expected Original form of tender not found in user email",
				enhancedPayloadActual.getTriggerData().get(0).getPaymentData()
						.get(0).getType()
						+ "\n"
						+ enhancedPayloadActual.getTriggerData().get(0)
								.getPaymentData().get(0).getCardNbr(),
				bcomemailpage.getOrderDetails().get("original_form_of_tender"));
	}

	@Then("^i should see payment method$")
	public void i_should_see_payment_method() throws Throwable {
		Assert.assertEquals("Expected payment method not found in user email",
				enhancedPayloadActual.getTriggerData().get(0).getPaymentData()
						.get(0).getType()
						+ " "
						+ enhancedPayloadActual.getTriggerData().get(0)
								.getPaymentData().get(0).getCardNbr(),
				bcomemailpage.getOrderDetails().get("payment_method"));
	}

	@Then("^i should see refunded to card info$")
	public void i_should_see_refunded_to_card_info() throws Throwable {

		String card = "";
		String cardType = enhancedPayloadActual.getTriggerData().get(0)
				.getPaymentData().get(0).getType();
		if (cardType.equalsIgnoreCase("EGC")
				|| cardType.equalsIgnoreCase("VGC")
				|| cardType.equalsIgnoreCase("paypal")
				|| cardType.equalsIgnoreCase("Electronic Gift Card")) {
			card = "(Refunded to "
					+ enhancedPayloadActual.getTriggerData().get(0)
							.getPaymentData().get(0).getType() + ")";

		} else {

			card = "(Refunded to "
					+ enhancedPayloadActual.getTriggerData().get(0)
							.getPaymentData().get(0).getType()
					+ " "
					+ enhancedPayloadActual.getTriggerData().get(0)
							.getPaymentData().get(0).getCardNbr() + ")";
		}

		Assert.assertEquals("Expected card info not found in user email", card,
				bcomemailpage.getRefundedTo());

	}

	@Then("^i should see card credited$")
	public void i_should_see_card_credited() throws Throwable {
		String card = enhancedPayloadActual.getTriggerData().get(0)
				.getPaymentData().get(0).getType()
				+ " "
				+ enhancedPayloadActual.getTriggerData().get(0)
						.getPaymentData().get(0).getCardNbr();
		Assert.assertEquals(
				"Card credited is not displaying as expected in the email",
				card, bcomemailpage.getOrderDetails().get("card_credited"));
	}

	@Then("^i should see payment card and type:$")
	public void i_should_see_payment_card_and_type(String cardType)
			throws Throwable {
		cardType = cardType.replaceAll(
				"<cardNoAndCardType>",
				enhancedPayloadActual.getTriggerData().get(0).getPaymentData()
						.get(0).getType()
						+ " "
						+ enhancedPayloadActual.getTriggerData().get(0)
								.getPaymentData().get(0).getCardNbr()).trim();

		Assert.assertEquals(
				"Card credited is not displaying as expected in the email",
				cardType, bcomemailpage.getPaymentTypeForMaf().trim());
	}

	@Then("^i should see reason for replacement label and value$")
	public void i_should_see_reason_for_replacement_label_and_value()
			throws JsonParseException, JsonMappingException, IOException {

		Assert.assertEquals(
				"Expected reason for replacement not found in user email",
				enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getShipitems().get(0)
						.getReturnReason(),
				bcomemailpage.reasonForReplacement.getText());

		Assert.assertEquals(
				"Expected reason for replacement not found in user email",
				"Reason for replacement",
				bcomemailpage.reasonForReplacementLabel.getText().trim());

	}

	@And("^i should see store address$")
	public void i_should_see_store_address() throws Throwable {

		String storeAddrs = bcomemailpage.getstoreAddress().toLowerCase()
				.trim();

		Assert.assertTrue(
				"Store AddrLine1 is not matching with the expected value",
				storeAddrs.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getStoreAddrLine1()
						.toLowerCase()));
		Assert.assertTrue(
				"Store AddrLine2 is not matching with the expected value",
				storeAddrs.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getStoreAddrLine2()
						.toLowerCase()));
		Assert.assertTrue(
				"Store City is not matching with the expected value",
				storeAddrs.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getStoreCity()
						.toLowerCase()));
		Assert.assertTrue(
				"Store State is not matching with the expected value",
				storeAddrs.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getStoreState()
						.toLowerCase()));
		Assert.assertTrue(
				"Store ZipCode is not matching with the expected value",
				storeAddrs.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getStoreZipcode()
						.toLowerCase()));

	}

	@And("^i should see phone number for general questions$")
	public void i_should_see_phone_number_for_general_questions()
			throws Throwable {

		Assert.assertTrue(
				"Phone number for General Questions is not matching with the expected value",
				bcomemailpage.getstoreTimeAndPhoneNos().contains(
						"General Questions: "
								+ enhancedPayloadActual.getTriggerData().get(0)
										.getShipmentsData().get(0)
										.getStorePhone().trim().toLowerCase()));

	}

	@And("^i should see phone number for in-store pickup questions$")
	public void i_should_see_phone_number_for_instore_pickup_questions()
			throws Throwable {

		String inStorePickUpPhoneNumberFromMail = bcomemailpage
				.getstoreTimeAndPhoneNos().trim();
		String inStorePickUpPhoneNumberFromEp = "Questions about your in-store pickup? Call "
				+ enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getStoreBopsPhone().trim();

		inStorePickUpPhoneNumberFromMail = inStorePickUpPhoneNumberFromMail
				.replace("-", "");
		inStorePickUpPhoneNumberFromEp = inStorePickUpPhoneNumberFromEp
				.replace("-", "");

		Assert.assertTrue(
				"Phone number for in-store pickup Questions is not matching with the expected value",
				inStorePickUpPhoneNumberFromMail
						.contains(inStorePickUpPhoneNumberFromEp));

	}

	@And("^i should see order ready text$")
	public void i_should_see_order_ready() throws Throwable {

		String orderReadyText = bcomemailpage.getOrderReadyText();
		String billingFname = Utilities.returnCamelCase(enhancedPayloadActual
				.getTriggerData().get(0).getBillingData().getFirstName());
		String billingLname = Utilities.returnCamelCase(enhancedPayloadActual
				.getTriggerData().get(0).getBillingData().getLastName());
		String expectedText = "We have also notified " + billingFname + " "
				+ billingLname + " that this order is now ready.";

		if ((template.get("brand").equals("blcom") || template.get("brand")
				.equals("bwedd"))
				&& (template.get("subtype").equals("14S") || template.get(
						"subtype").equals("14T"))) {
			Assert.assertTrue(
					"Order Ready text (expectedText) is not matching with the expected value",
					orderReadyText.contains(expectedText));
		}

	}

	@And("^i should see contact information$")
	public void i_should_see_contact_information() throws Throwable {

		String cntctInformation = bcomemailpage.getcontactInformation().trim();

		Assert.assertTrue(
				"Pickup order First Name is not match with actual",
				cntctInformation.contains(enhancedPayloadActual
						.getTriggerData().get(0).getShipmentsData().get(0)
						.getFirstName().toLowerCase()));

		Assert.assertTrue(
				"Pickup order Last Name is not match with actual",
				cntctInformation.contains(enhancedPayloadActual
						.getTriggerData().get(0).getShipmentsData().get(0)
						.getLastName().toLowerCase()));

		Assert.assertTrue(
				"Expected store phone Number not match with actual",
				cntctInformation.contains(enhancedPayloadActual
						.getTriggerData().get(0).getShipmentsData().get(0)
						.getphone()));

		Assert.assertTrue(
				"Expected store Email Address not match with actual",
				cntctInformation.contains(enhancedPayloadActual
						.getTriggerData().get(0).getShipmentsData().get(0)
						.getemail().toLowerCase()));

	}

	@And("^i should see store pickup instructions$")
	public void i_should_see_store_pickup_instructions() throws Throwable {

		String storePickupInstructionsFromMail = bcomemailpage
				.getstorePickupInstructions().replaceAll("\n", "").trim();

		String storePickupInstructionsFromEP = enhancedPayloadActual
				.getTriggerData().get(0).getShipmentsData().get(0)
				.getStorePickupInstructions().replaceAll("\\|", "").trim();

		storePickupInstructionsFromMail = storePickupInstructionsFromMail
				.replaceAll(" ", "");

		storePickupInstructionsFromEP = (storePickupInstructionsFromEP
				.replaceAll(" ", "")).replaceAll("<BR>", "");
		
		Assert.assertEquals(
				"Expected Store Pickup Instructions is not found in user email",
				storePickupInstructionsFromEP, storePickupInstructionsFromMail);

	}

	private static String getdefaultDateFormat(String date) throws ParseException {
		SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yy");
		Date d = formatter.parse(date);
		formatter.applyPattern("MM/dd/yyyy");
		return formatter.format(d).toString();
	}

	@Then("^i should see shipping first name$")
	public void i_should_see_shipping_first_name() throws Throwable {
		Assert.assertEquals(
				"Expected First name not found in user email",

				"Dear "
						+ Utilities.returnCamelCase(enhancedPayloadActual
								.getTriggerData().get(0).getShipmentsData()
								.get(0).getFirstName()) + ",",
				bcomemailpage.getFirstName());
	}

	@Then("^i should see security firstname$")
	public void i_should_see_security_firstname() throws Throwable {
		Assert.assertEquals(
				"Expected First name not found in user email",
				"Dear "
						+ Utilities.returnCamelCase(enhancedPayloadActual
								.getTriggerData().get(0).getWebsiteData()
								.getSecurityFirstName()) + ",",
				bcomemailpage.getFirstName());

	}

	@Then("^i should see product details$")
	public void i_should_see_product_details() throws Throwable {
		Iterator qty = bcomemailpage.getItemDetails().get("quantity")
				.iterator();
		Iterator clr = bcomemailpage.getItemDetails().get("color").iterator();
		Iterator siz = bcomemailpage.getItemDetails().get("size").iterator();
		Iterator prdImg = bcomemailpage.getItemDetails()
				.get("product_image_url").iterator();
		Iterator prdImgSrc = bcomemailpage.getItemDetails()
				.get("product_image_src").iterator();
		Iterator prdName = bcomemailpage.getItemDetails().get("product_name")
				.iterator();
		Iterator prdImgURL = bcomemailpage.getItemDetails()
				.get("product_image_url").iterator();
		Iterator tracking = bcomemailpage.getItemDetails().get("tracking")
				.iterator();
		Iterator shipDate = bcomemailpage.getItemDetails().get("shipdate")
				.iterator();
		Iterator shipmentType = bcomemailpage.getItemDetails()
				.get("shipmenttype").iterator();
		Iterator webId = bcomemailpage.getItemDetails().get("web_id")
				.iterator();
		Iterator sendTo = bcomemailpage.getItemDetails().get("sendto")
				.iterator();

		for (int shipment = 0; shipment < enhancedPayloadActual
				.getTriggerData().get(0).getShipmentsData().size(); shipment++) {

			for (int item = 0; item < enhancedPayloadActual.getTriggerData()
					.get(0).getShipmentsData().get(shipment).getShipitems()
					.size(); item++) {

				/*
				 * "000000492031403361" upc verification required as part of
				 * Loyalty Decrement Project. Ref Story# B-95302,B-94720,
				 * 
				 * D-65209 "000000492030504038" upc verification required as
				 * part of bwallet Project. Ref Story# B-96676
				 */

				JSONObject enhancedPayloadObject = new JSONObject(
						enhancedPayloadActual);
				String convertPayloadTostr = enhancedPayloadObject.toString();

				String upcIdFromEp = null;

				if (convertPayloadTostr.contains("upcNumber")) {

					upcIdFromEp = enhancedPayloadActual.getTriggerData().get(0)
							.getShipmentsData().get(shipment).getShipitems()
							.get(item).getUpcNumber();

				} else {

					upcIdFromEp = enhancedPayloadActual.getTriggerData().get(0)
							.getShipmentsData().get(shipment).getShipitems()
							.get(item).getUpc();

				}

				if (!(upcIdFromEp.equalsIgnoreCase("000000492031403361") || upcIdFromEp
						.equalsIgnoreCase("000000492030504038"))) {

					String quantity = null;

					String shipType = enhancedPayloadActual.getTriggerData()
							.get(0).getShipmentsData().get(shipment)
							.getShipitems().get(item).getShipmentType();
					try {
						if (shipType != null) {
							if (shipType != "RETURN" || shipType != "Exchange")
								if (!(shipType.equalsIgnoreCase("RETURN") || shipType
										.equalsIgnoreCase("Exchange"))) {

									if (enhancedPayloadActual.getTriggerData()
											.get(0).getShipmentsData()
											.get(shipment).getShipitems()
											.get(item).getStatus()
											.equalsIgnoreCase("IN PROCESS")) {
										quantity = enhancedPayloadActual
												.getTriggerData().get(0)
												.getShipmentsData()
												.get(shipment).getShipitems()
												.get(item).getReqQuantity()
												.trim();

									} else if (enhancedPayloadActual
											.getTriggerData().get(0)
											.getShipmentsData().get(shipment)
											.getShipitems().get(item)
											.getStatus()
											.equalsIgnoreCase("SHIPPED")) {
										quantity = enhancedPayloadActual
												.getTriggerData().get(0)
												.getShipmentsData()
												.get(shipment).getShipitems()
												.get(item).getShippedQuantity()
												.trim();

									} else if (enhancedPayloadActual
											.getTriggerData().get(0)
											.getShipmentsData().get(shipment)
											.getShipitems().get(item)
											.getStatus()
											.equalsIgnoreCase("VOIDED")) {
										quantity = enhancedPayloadActual
												.getTriggerData().get(0)
												.getShipmentsData()
												.get(shipment).getShipitems()
												.get(item)
												.getCancelledQuantity().trim();
									}
								} else {
									// for virtual return templates
									quantity = enhancedPayloadActual
											.getTriggerData().get(0)
											.getShipmentsData().get(shipment)
											.getShipitems().get(item)
											.getReqQuantity().trim();
								}
						}
					} catch (NullPointerException e) {
						e.printStackTrace();
					}

					if (quantity != null) {
						Assert.assertEquals(
								"Expected Product Qty not match with actual",
								Integer.parseInt(quantity),
								Integer.parseInt(qty.next().toString().trim()));
					}

					String color = enhancedPayloadActual.getTriggerData()
							.get(0).getShipmentsData().get(shipment)
							.getShipitems().get(item).getProductColor();

					if (color != null) {
						Assert.assertEquals(
								"Expected product not match with Actual product name",
								color.trim(), clr.next().toString().trim());
					}

					String size = enhancedPayloadActual.getTriggerData().get(0)
							.getShipmentsData().get(shipment).getShipitems()
							.get(item).getProductSize();
					if (size != null) {
						Assert.assertEquals(
								"Expected product size not match with Actual product name",
								size, siz.next().toString().trim());

					}
					/*
					 * 
					 * Not Applicable for BCOM String type =
					 * enhancedPayloadActual.getTriggerData
					 * ().get(0).getShipmentsData ().get(shipment).getShipitems
					 * ().get(item).getProductType(); if(type != null){
					 * Assert.assertEquals(
					 * "Expected product Type not match with Actual product name"
					 * , type,
					 * bcomemailpage.getItemDetails().get("type").iterator
					 * ().next ()); }
					 */
					String productImageUL = enhancedPayloadActual
							.getTriggerData().get(0).getShipmentsData()
							.get(shipment).getShipitems().get(item)
							.getImagePrimaryUrl();
					if (productImageUL != null) {
						Assert.assertEquals(
								"Invalid Product Image url",
								Integer.parseInt("200"),
								bcomemailpage.getResponseCodeByURL(prdImg
										.next().toString().trim()));

					}

					String productSrc = enhancedPayloadActual.getTriggerData()
							.get(0).getShipmentsData().get(shipment)
							.getShipitems().get(item).getImageUrl();
					if (productSrc != null) {
						Assert.assertEquals(
								"Expected product name not match with actual",
								productSrc, prdImgSrc.next().toString().trim());

					}

					String productNameURL = enhancedPayloadActual
							.getTriggerData().get(0).getShipmentsData()
							.get(shipment).getShipitems().get(item)
							.getProductURL();
					if (productNameURL != null) {
						Assert.assertEquals("Product url not valid ", Integer
								.parseInt("200"), bcomemailpage
								.getResponseCodeByURL(prdImgURL.next()
										.toString()));
					}

					String productName = enhancedPayloadActual.getTriggerData()
							.get(0).getShipmentsData().get(shipment)
							.getShipitems().get(item).getProductName();
					if (productName != null) {
						if (prdName.hasNext() && productNameURL != null) {
							Assert.assertEquals(
									"Expected product name not match with actual",
									productName, prdName.next());
						} else {
							Assert.assertTrue(
									"Product name not exist in email page",
									bcomemailpage.isTextPresent(productName));
						}
					}

					// Tracking Number Validation
					String trackingNumber = null;
					if (enhancedPayloadActual.getTriggerData().get(0)
							.getShipmentsData().get(shipment)
							.getTrackingDetails().size() > 0) {

						trackingNumber = enhancedPayloadActual.getTriggerData()
								.get(0).getShipmentsData().get(shipment)
								.getTrackingDetails().get(0).getTrackingNbr();

						if (!(trackingNumber.matches("NOT DEFINED FOR SDD"))
								&& (trackingNumber != null)) {
							Assert.assertEquals("Tracking Number is not valid",
									trackingNumber, tracking.next());
						}
					}

					// Ship Date Validation
					String shippedDate = null;
					String emailshipDate = null;
					try {
						if (enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(shipment).getMailFlag()
								.equals("C")
								|| enhancedPayloadActual.getTriggerData()
										.get(0).getShipmentsData()
										.get(shipment).getMailFlag()
										.equals("P")) {
							shippedDate = enhancedPayloadActual
									.getTriggerData().get(0).getShipmentsData()
									.get(shipment).getShippedDate();
						} else {
							shippedDate = enhancedPayloadActual
									.getTriggerData().get(0).getShipmentsData()
									.get(shipment).getShipitems().get(item)
									.getExpectedDate();
						}

						emailshipDate = (String) shipDate.next();

					} catch (Exception e) {
						e.printStackTrace();
					}
					if (shippedDate != null && emailshipDate != null) {
						SimpleDateFormat sd = new SimpleDateFormat("MM/dd/yy");
						SimpleDateFormat sdf = new SimpleDateFormat(
								"MM/dd/yyyy");
						Assert.assertEquals(
								"Shipped date is not matching with the expected result",
								shippedDate,
								sdf.format(sd.parse(emailshipDate)));
					}

					// Shipment Type Validation

					if (shipmentType.hasNext()) {
						String actualShipmentType = null;
						String expectedShipmentType = null;

						actualShipmentType = enhancedPayloadActual
								.getTriggerData().get(0).getShipmentsData()
								.get(shipment).getShipitems().get(item)
								.getShipmentType();

						if (!enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(shipment)
								.getShipitems().get(item).getStatus()
								.equals("VOIDED")
								&& bcomemailpage.getItemDetails()
										.get("shipmenttype").size() != 0) {

							expectedShipmentType = (String) shipmentType.next();

						}

						if (actualShipmentType != null
								&& expectedShipmentType != null) {
							switch (actualShipmentType) {
							case "STANDARD":
								Assert.assertEquals(
										"Shipped type is not matching with the expected result",
										"Standard Shipping",
										expectedShipmentType);
								break;
							case "PREMIUM":

								if (enhancedPayloadActual.getTriggerData()
										.get(0).getShipmentsData()
										.get(shipment).getShipitems().get(item)
										.getFdIndicator().equals("R")) {
									Assert.assertEquals(
											"Shipped type is not matching with the expected result",
											"SHOPRUNNER FREE 2-DAY",
											expectedShipmentType);
									break;
								} else {
									Assert.assertEquals(
											"Shipped type is not matching with the expected result",
											"Premium Shipping",
											expectedShipmentType);
									break;
								}

							case "EXPRESS":
								Assert.assertEquals(
										"Shipped type is not matching with the expected result",
										"Premium Shipping",
										expectedShipmentType);
								break;
							case "EMAIL":
								Assert.assertEquals(
										"Shipped type is not matching with the expected result",
										"Email", expectedShipmentType);
								break;
							default:
								System.out
										.println("Invalid shipment type value");
							}
						}
					}

					// Web ID Validation
					String lineWebId = enhancedPayloadActual.getTriggerData()
							.get(0).getShipmentsData().get(shipment)
							.getShipitems().get(item).getLineWebId();
					if (lineWebId != null) {
						String lineWebIdFromMail = (String) webId.next();
						Assert.assertEquals(
								"Expected Web Id not match with the Actual Web Id",
								lineWebId, lineWebIdFromMail.trim());
					}

					// Send To email Validation

					if (sendTo.hasNext()) {
						String sendToEmail = enhancedPayloadActual
								.getTriggerData().get(0).getShipmentsData()
								.get(shipment).getRegistryReceipientEmail();
						if (sendToEmail != null
								&& bcomemailpage.getItemDetails().get("sendto")
										.size() != 0) {
							Assert.assertEquals(
									"Expected email address is not matching with the actual",
									sendToEmail, sendTo.next());
						}
					}

				}
			}
		}
	}

	@Then("^i should see header:$")
	public void i_should_see_header(String header) throws Throwable {
		String bodyheader = bcomemailpage.header.getText().replace("\n", " ");
		Assert.assertTrue("header  \" " + header + " \" not exists",
				bodyheader.contains(header));
	}

	@Then("^i should see freeshipping image$")
	public void i_should_see_freeshipping_image() throws Throwable {
		Assert.assertTrue("Freeshipping image NOT exists in email page",
				bcomemailpage.freeShipping.isDisplayed());
	}

	@Then("^i should see instore pickup text and option$")
	public void i_should_see_instore_pickup_text_and_option() throws Throwable {

		Assert.assertEquals(
				"Expected 'In-Store Pickup' at order section is not match with actual",
				bcomemailpage.getinStorePickup(), "In-Store Pickup;FREE");
	}

	@Then("^i should see note text as:$")
	public void i_should_see_note_text(String strNote) throws Throwable {
		int numberoflinks = StringUtils.countMatches(strNote, "<link>");
		String[] contents = strNote.split("<link>");
		if (numberoflinks >= 2) {
			for (int cnt = 1; cnt <= numberoflinks; cnt += 2) {
				Assert.assertNotNull("Link \" " + contents[cnt]
						+ " \" not exists", Browser.instance().firefoxDriver()
						.findElementByLinkText(contents[cnt]));
			}
			for (int cnt = 0; cnt < contents.length - 1; cnt += 2) {
				Assert.assertTrue(
						"Static text \" " + contents[cnt]
								+ " \" not exists in "
								+ bcomemailpage.noteText.getText(), StringUtils
								.contains(bcomemailpage.noteText.getText(),
										contents[cnt]));
			}
		} else {
			Assert.assertTrue(
					"Static text \" "
							+ strNote
							+ " \" not exists in "
							+ bcomemailpage.staticMessageShippingPolicy
									.getText(),
					StringUtils.contains(strNote,
							bcomemailpage.noteText.getText()));
		}
	}

	@Then("^i should verify shipment details$")
	public void i_should_see_shipment_details() throws Throwable {
		Iterator tracking = bcomemailpage.getShipmentDetails()
				.get("tracking_num").iterator();
		Iterator shipment = bcomemailpage.getShipmentDetails()
				.get("delivery_method").iterator();
		Iterator sendTo = bcomemailpage.getShipmentDetails().get("send_to")
				.iterator();
		for (int j = 0; j < bcomemailpage.getShipmentDetails()
				.get("tracking_num").size(); j++) {
			for (int i = 0; i < bcomemailpage.getShipmentDetails()
					.get("delivery_method").size(); i++) {
				String shipmentType = enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(i).getShipitems().get(0)
						.getShipmentType();

				// Validation of Tracking Number
				// Tracking Number Validation
				String trackingNumber = null;
				if (enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(i).getTrackingDetails().size() > 0) {

					if (tracking != null) {
						Assert.assertEquals(
								"Tracking Number is not displayed ", Integer
										.parseInt("200"), bcomemailpage
										.getResponseCodeByLinkText(tracking
												.next().toString()));

						// Validation of delivery method
						if (!shipmentType.equals("SAMEDAY")) {
							Assert.assertEquals(
									"Expected Delivery Method not match",
									shipmentType, shipment.next());
						} else {
							Assert.assertEquals(
									"Expected Delivery Method not match",
									"SAME DAY DELIVERY", shipment.next());
						}

						// Validation of Shipping Address and Email

						if (shipmentType.equals("EMAIL")) {
							Assert.assertEquals(
									"Expected Send to address not match with Actual",
									enhancedPayloadActual.getTriggerData()
											.get(0).getShipmentsData().get(i)
											.getRegistryReceipientEmail(),
									sendTo.next());
						}

						else {
							Assert.assertEquals(
									"Expected Shipping address not match with Actual",
									enhancedPayloadActual.getTriggerData()
											.get(0).getShipmentsData().get(i)
											.getAddress().replace(",", ""),
									bcomemailpage.getShipmentDetails()
											.get("shipping_address").iterator()
											.next().toString()
											.replaceAll("\\n", "")
											.replace(",", ""));

						}
					}

				}
			}
		}
	}

	@Then("^i should verify shipment address for fedfil sdd partial cancel$")
	public void i_should_verify_shipment_address_for_fedfil_sdd_partial_cancel()
			throws Throwable {
		String shippingAddress_enhancedPayload = enhancedPayloadActual.getTriggerData().get(0).getShipmentsData().get(0).getAddress().replace(",", "");
		shippingAddress_enhancedPayload = shippingAddress_enhancedPayload.replace("null", "");

		Assert.assertEquals("Expected Shipping address not match with Actual",
				shippingAddress_enhancedPayload,bcomemailpage.getOrderDetails().get("shipping_address")
						.toString().replaceAll("\\n", "").replace(",", ""));
	}

	@Then("^i should see singleline header:$")
	public void i_should_see_singleline_header(String header) throws Throwable {
		String shipmentFirstNameFromEp = enhancedPayloadActual.getTriggerData()
				.get(0).getShipmentsData().get(0).getFirstName();
		header = header.replaceAll("<shipmentname>", shipmentFirstNameFromEp);
		Assert.assertEquals("Single line header is not matching", header,
				bcomemailpage.singleHeader.getText().trim());
	}

	@Then("^i should see singleline body text:$")
	public void i_should_body_singleline_body_text(String text)
			throws Throwable {
		String shipmentFirstNameFromEp = enhancedPayloadActual.getTriggerData()
				.get(0).getShipmentsData().get(0).getFirstName();
		text = text.replaceAll("<shipmentname>", shipmentFirstNameFromEp);

		Assert.assertEquals("Single line body is not matching",
				text.toLowerCase(), bcomemailpage.wishlistSingleText.getText()
						.toLowerCase().trim());
	}

	@Then("^i should see \"([^\"]*)\" link$")
	public void i_should_see_View_Wish_Link(String linkName) throws Throwable {
		Assert.assertEquals("Product image link not valid ",
				Integer.parseInt("200"),
				bcomemailpage.getResponseCodeByLinkText(linkName));
	}

	@Then("^i should see shipping policy as:$")
	public void i_should_see_shipping_policy_as(String strPolicy)
			throws Throwable {
		int numberoflinks = StringUtils.countMatches(strPolicy, "<link>");
		if (numberoflinks >= 2) {
			String[] contents = strPolicy.split("<link>");
			for (int cnt = 1; cnt <= numberoflinks; cnt += 2) {
				Assert.assertNotNull("Link \" " + contents[cnt]
						+ " \" not exists", Browser.instance().firefoxDriver()
						.findElementByLinkText(contents[cnt]));
			}
			for (int cnt = 0; cnt < contents.length - 1; cnt += 2) {
				Assert.assertTrue("Static text \" " + contents[cnt]
						+ " \" not exists in "
						+ bcomemailpage.staticMessageShippingPolicy.getText(),
						StringUtils.contains(
								bcomemailpage.staticMessageShippingPolicy
										.getText(), contents[cnt]));
			}
		} else {
			Assert.assertTrue("Static text \" " + strPolicy
					+ " \" not exists in "
					+ bcomemailpage.staticMessageShippingPolicy.getText(),
					StringUtils
							.contains(strPolicy,
									bcomemailpage.staticMessageShippingPolicy
											.getText()));
		}
	}

	@Then("^i should see static contents for com template:$")
	public void i_should_see_static_contents_for_com_template(String text)
			throws Throwable {
		int numberoflinks = StringUtils.countMatches(text, "<link>");
		if (numberoflinks >= 2) {
			String[] contents = text.split("<link>");
			for (int cnt = 1; cnt <= numberoflinks; cnt += 2) {
				Assert.assertNotNull("Link \" " + contents[cnt]
						+ " \" not exists", Browser.instance().firefoxDriver()
						.findElementByLinkText(contents[cnt]));
			}
			for (int cnt = 0; cnt < contents.length - 1; cnt += 2) {

				Assert.assertTrue("Static text \" " + contents[cnt]
						+ " \" not exists in " + bcomemailpage.getAllLabels(),
						StringUtils.contains(bcomemailpage.getAllLabels(),
								contents[cnt].toLowerCase()));
			}
		}
	}

	@Then("^i should see static contents for security password:$")
	public void i_should_see_static_contents_for_security_password(
			String bodyText) throws Throwable {
		bodyText = bodyText.replaceAll("<url>", enhancedPayloadActual
				.getTriggerData().get(0).getWebsiteData().getSecurityUrl());
		Assert.assertEquals("Body text is not as expected in the email",
				bodyText.toLowerCase().trim(), bcomemailpage.getAllLabels()
						.replaceAll("\n", "").trim());

	}

	@Then("^i should see static content for profile reset password as:$")
	public void i_should_see_static_content_for_profile_reset_password_as(
			String text) throws Throwable {
		String expected1 = text.split("<")[0];
		String expected2 = text.split(">")[1];
		String expected = expected1
				+ enhancedPayloadActual.getTriggerData().get(0)
						.getWebsiteData().getPromoUrl() + "." + expected2;
		i_should_see_static_contents(expected);
	}

	@Then("^i should see delivery method$")
	public void i_should_see_delivery_method() throws Throwable {
		for (int i = 0; i < bcomemailpage.getShipmentDetails()
				.get("delivery_method").size(); i++) {
			Assert.assertEquals("Expected Delivery Method not match",
					enhancedPayloadActual.getTriggerData().get(0)
							.getShipmentsData().get(i).getShipitems().get(0)
							.getShipmentType(), bcomemailpage
							.getShipmentDetails().get("delivery_method")
							.iterator().next());
		}
	}

	private boolean compareFloatVals(String val1, String val2) {
		Float valueOne = Float.parseFloat(val1.split("$")[1]);
		Float valueTwo = Float.parseFloat(val1.split("$")[1]);
		return valueOne.equals(valueTwo);
	}

	@Then("^i should see instore pickup information$")
	public void i_should_see_instore_pickup_information() throws Throwable {
		Assert.assertTrue(
				"IN-STORE PICKUP INFORMATION NOT exists in email page",
				bcomemailpage.instore.isDisplayed());
	}

	@Then("^i should see store bops phone number$")
	public void i_should_see_store_bops_phoneno() throws Throwable {
		String Phone = bcomemailpage.phoneNo.getText().replace("-", "")
				.toString();

		Assert.assertTrue(
				"Store bops phone number is not matching with the expected value",
				Phone.contains(enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getStoreBopsPhone()));
	}

	@Then("^i should see shipment phone number$")
	public void i_should_see_shipment_phone_no() throws Throwable {
		String labelText = bcomemailpage.getAllLabels();
		Assert.assertTrue(
				"Store shipmet phone no is not matching with the expected value",
				labelText.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getphone()));

	}

	@Then("^i should see sms opted message text$")
	public void i_should_see_sms_opted_message_text() throws Throwable {

		if (enhancedPayloadActual.getTriggerData().get(0).getOrderBaseData()
				.getSmsFlag().equals("Y")) {

			Assert.assertTrue(
					"Expected sms opted message not match",
					bcomemailpage
							.getSmsOptMsg()
							.contains(
									"You opted to receive messages with updates to this order"));
		}
	}

	@Then("^i should see order explanation text$")
	public void i_should_see_order_explanation_text() throws Throwable {
		String expData = bcomemailpage.getexptext();
		String shipmentFirstNameFromEp = enhancedPayloadActual.getTriggerData()
				.get(0).getShipmentsData().get(0).getFirstName();
		if (enhancedPayloadActual.getTriggerData().get(0).getOrderData()
				.getExplanationText() != null) {
			String enhancedData = enhancedPayloadActual.getTriggerData().get(0)
					.getOrderData().getExplanationText();
			String formatData = enhancedData + " " + "View Wish Link";
			Assert.assertTrue("Expected order explanation text not match",
					expData.contains(formatData));
		}
	}

	@Then("^i should see store details$")
	public void i_should_see_store_details() throws Throwable {
		String labelText = bcomemailpage.getAllLabels();

		Assert.assertTrue(
				"Store Name is not matching with the expected value",
				labelText.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getStoreName()
						.toLowerCase()));
		Assert.assertTrue(
				"Store address line1 is not matching with the expected value",
				labelText.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getStoreAddrLine1()
						.toLowerCase()));
		Assert.assertTrue(
				"Store address line2 is not matching with the expected value",
				labelText.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getStoreAddrLine2()
						.toLowerCase()));
		Assert.assertTrue(
				"Store city is not matching with the expected value",
				labelText.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getStoreCity()
						.toLowerCase()));
		Assert.assertTrue(
				"Store state is not matching with the expected value",
				labelText.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getStoreState()
						.toLowerCase()));
		Assert.assertTrue(
				"Store zipcode is not matching with the expected value",
				labelText.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getStoreZipcode()
						.toLowerCase()));
		Assert.assertTrue(
				"Pickup order FirstName is not matching with the expected value",
				labelText.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getFirstName()
						.toLowerCase()));
		Assert.assertTrue(
				"Pickup order LastName is not matching with the expected value",
				labelText.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getLastName()
						.toLowerCase()));
		Assert.assertTrue(
				"Pickup order LastName is not matching with the expected value",
				labelText.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getLastName()
						.toLowerCase()));
		Assert.assertTrue(
				"Pickup order email is not matching with the expected value",
				labelText.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getemail()
						.toLowerCase()));
		Assert.assertTrue(
				"Pickup order email is not matching with the expected value",
				labelText.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getemail()
						.toLowerCase()));

	}

	@Then("^i should see store instructions$")
	public void i_should_see_store_instructions() throws Throwable {
		String labelText = bcomemailpage.getAllLabels();
		Assert.assertTrue(
				"Store pickup instruction is not matching with the expected value",
				labelText.contains(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0)
						.getStorePickupInstructions().toLowerCase().trim()
						.replaceAll("\\s+", " ")));

	}

	@Then("^i should see order details$")
	public void i_should_see_order_details() throws Throwable {

		String subtotal = null;
		if (getTemplateType().equals("264_14U_BLCOM")) {
			subtotal = enhancedPayloadActual.getTriggerData().get(0)
					.getShipmentsData().get(0).getShipRetailAmount();
		} else {
			subtotal = enhancedPayloadActual.getTriggerData().get(0)
					.getOrderTotalsData().getSubTotalAmt();
		}

		if (subtotal != null) {
			Assert.assertEquals(
					"Subtotal value expected and actual not equal",
					"$" + subtotal,
					bcomemailpage.getOrderTotal().get("subtotal")
							.replaceAll(",", ""));
		}
		String standardShipping = enhancedPayloadActual.getTriggerData().get(0)
				.getOrderTotalsData().getBaseShippingAmt();
		if (standardShipping != null && standardShipping.charAt(0) != '0') {
			Assert.assertEquals(
					"Standard Shipping value expected and actual not equal",
					"$" + standardShipping,
					bcomemailpage.getOrderTotal().get("standard_shipping")
							.replaceAll(",", ""));
		}

		String giftWrap = enhancedPayloadActual.getTriggerData().get(0)
				.getOrderTotalsData().getGiftWrapFeeAmt();
		if (giftWrap != null && giftWrap.charAt(0) != '0') {
			Assert.assertEquals(
					"Gift Wrap value expected and actual not equal",
					"$" + giftWrap,
					bcomemailpage.getOrderTotal().get("gift_wrap")
							.replaceAll(",", ""));
		}

		String salesTax = enhancedPayloadActual.getTriggerData().get(0)
				.getOrderTotalsData().getSalesTaxAmount();
		if (salesTax != null && salesTax.charAt(0) != '0') {
			Assert.assertEquals(
					"Sales Tax value expected and actual not equal",
					"$"
							+ enhancedPayloadActual.getTriggerData().get(0)
									.getOrderTotalsData().getSalesTaxAmount(),
					bcomemailpage.getOrderTotal().get("sales_tax")
							.replaceAll(",", ""));
		}

		String orderTotal = enhancedPayloadActual.getTriggerData().get(0)
				.getOrderTotalsData().getOrderTotal();
		if (orderTotal != null) {
			Assert.assertEquals(
					"Order Total value expected and actual not equal", "$"
							+ orderTotal,
					bcomemailpage.getOrderTotal().get("order_total")
							.replaceAll(",", ""));
		}

		// In store pick up validation
		if (bcomemailpage.getOrderTotal().get("in_store_pickup") != null) {
			Assert.assertEquals(
					"In Store Pick Value is not displaying as expected",
					"FREE", bcomemailpage.getOrderTotal()
							.get("in_store_pickup"));
		}

		// same day delivery validation
		String sameDayDelivery = enhancedPayloadActual.getTriggerData().get(0)
				.getOrderTotalsData().getShipmentUpgradeFeeAmount();
		if (bcomemailpage.getOrderTotal().get("same_day_delivery") != null) {
			Assert.assertEquals(
					"Same Day Delivery Value is not displaying as expected",
					"$" + sameDayDelivery,
					bcomemailpage.getOrderTotal().get("same_day_delivery"));

		}
		if (bcomemailpage.getOrderTotal().get("ShopRunner_shipping") != null) {
			Assert.assertEquals(
					"In shop runner shipping Value is not displaying as expected",
					"FREE", bcomemailpage.getOrderTotal()
							.get("ShopRunner_shipping"));
		}
	}

	@Then("^i should see payment card info$")
	public void i_should_see_payment_card_info() throws Throwable {
		enhancedPayloadActual.getTriggerData().get(0).getPaymentData().get(0)
				.getType();
		Assert.assertTrue(
				"Expected payment Card Type not match with actual",
				bcomemailpage
						.getOrderTotal()
						.get("card")
						.contains(
								enhancedPayloadActual.getTriggerData().get(0)
										.getPaymentData().get(0).getType()));
		if(!eod_template_name.contains("eod")){
		Assert.assertTrue(
				"Expected payment Card Number not match with actual",
				bcomemailpage
						.getOrderTotal()
						.get("card")
						.contains(
								enhancedPayloadActual.getTriggerData().get(0)
										.getPaymentData().get(0).getCardNbr()));
		}
		Assert.assertEquals("Expected Charge amount not match with actual", "$"
				+ enhancedPayloadActual.getTriggerData().get(0)
						.getPaymentData().get(0).getChargeAmt(), bcomemailpage
				.getOrderTotal().get("charge_amount").replace(",", ""));
	}

	@Then("^i should see gift receipt option$")
	public void i_should_see_gift_receipt_option() throws Throwable {
		Assert.assertEquals("Expected 'Gift Receipt' is not match with actual",
				bcomemailpage.getgiftReceipt(), "Gift Receipt: Yes");
	}

	@Then("^i should see static text:$")
	public void i_should_see_static_text(String bodyText) throws Throwable {
		String bodyStaticText = bcomemailpage.bodystatictext.getText().trim()
				.replace("\n", " ");
		Assert.assertTrue(
				"body static text  \" " + bodyText + " \" not exists",
				bodyStaticText.contains(bodyText));
	}
	
	@And("^i should see signatue contents for gpgm template:$")
	public void i_should_see_signatue_contents_for_gpgm_template(String signatureText) throws Throwable {
		
		String signatireTextFromMail = bcomemailpage.getSignatureLabels();
		Assert.assertEquals("Mail Signature message "+signatureText+" not exist", signatureText.trim(), signatireTextFromMail.trim());
	}

	@Then("^i should see loyallist free shipping logo$")
	public void i_should_see_loyallist_free_shipping_logo() throws Throwable {
		Assert.assertTrue(bcomemailpage.loyallistShipping.isDisplayed());
	}

	@And("^i should see static contents in bmoney rewardcard:$")
	public void i_should_see_static_contents_in_bmoney_rewardcard(
			String statictext) throws Throwable {

		Assert.assertTrue(
				"bmoney rewardcard Information not displaying as expected in the email",
				StringUtils.contains(bcomemailpage.getAllLabels().toLowerCase()
						.trim(), statictext.toLowerCase().trim()));
	}

	@And("^i should see redeem information in rewardcard:$")
	public void i_should_see_redeem_information_in_rewardcard(String bodyText)
			throws Throwable {

		bodyText = bodyText
				.replaceAll(
						"<rewardCardAmt>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getOrderData().getRewardCardAmt())
				.replaceAll(
						"<rewardCardEffectiveDate>",
						getModifiedYearFormat(enhancedPayloadActual
								.getTriggerData().get(0).getOrderData()
								.getRewardCardEffectiveDate()))
				.replaceAll(
						"<rewardCardExpirationDate>",
						getModifiedYearFormat(enhancedPayloadActual
								.getTriggerData().get(0).getOrderData()
								.getRewardCardExpirationDate()))
				.replaceAll(" ", "").toLowerCase().trim();

		Assert.assertTrue(
				"Expected reward information not found in user email",
				StringUtils.contains(bcomemailpage.getRedeemDetails()
						.replaceAll("\\r\\n|\\r|\\n", "").replaceAll(" ", "")
						.toLowerCase().trim(), bodyText));
	}

	@Then("^i should see \"([^\"]*)\" label in bmoney rewardcard$")
	public void i_should_see_label_in_bmoney_rewardcard(String labelName)
			throws Throwable {

		Assert.assertTrue(
				"Expected reward label information not found in user email",
				StringUtils.contains(bcomemailpage.getRedeemDetails()
						.replaceAll("\\r\\n|\\r|\\n", "").replaceAll(" ", "")
						.toLowerCase().trim(), labelName.replaceAll(" ", "")
						.toLowerCase().trim()));
	}
	
	@Then("^i should see reason for reduction message:$")
	public void i_should_see_Reason_for_reduction_message(String reasonReductiontext)
			throws Throwable {
		
		Assert.assertTrue("Static text not displaying as expected",
				StringUtils.contains(reasonReductiontext, bcomemailpage.getReductionReasonMessageText().replace("\n", "")));
			
			}

	@Then("^i should see static contents for virtual return reminder:$")
	public void i_should_see_static_contents_for_virtual_return_reminder(
			String bodyText) throws Throwable {

		String returnSubmittedDate = getModifiedYearFormat(enhancedPayloadActual
				.getTriggerData().get(0).getShipmentsData().get(0)
				.getReturnSubmittedDate());
		String estimatedRefund = "$"
				+ enhancedPayloadActual.getTriggerData().get(0)
						.getPaymentData().get(0).getChargeAmt();

		StringBuilder sb = new StringBuilder(bodyText);
		// do your replacing in sb - although you'll find this trickier than
		// simply using String
		String newStr = sb.toString();
		newStr = newStr
				.replaceAll("<returnsubmitteddate>", returnSubmittedDate)
				.replaceAll("<estimatedrefund>",
						Matcher.quoteReplacement(estimatedRefund));

		Assert.assertTrue(
				"Expected text: " + newStr
						+ "is not matching with Actual text :"
						+ bcomemailpage.getAllLabels(),
				StringUtils.contains(bcomemailpage.getAllLabels(),
						newStr.toLowerCase()));
	}

	@Then("^i should see static contents for virtual exchange reminder:$")
	public void i_should_see_static_contents_for_virtual_exchange_reminder(
			String bodyText) throws Throwable {
		String totalSum = "$"
				+ new DecimalFormat("0.00").format(Float
						.parseFloat(enhancedPayloadActual.getTriggerData()
								.get(0).getShipmentsData().get(0)
								.getShipRetailAmount())
						+ Float.parseFloat(enhancedPayloadActual
								.getTriggerData().get(0).getShipmentsData()
								.get(0).getShipTaxAmount()));

		bodyText = bodyText.replaceAll(
				"<returnSubmittedDate>",
				enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getReturnSubmittedDate())
				.replaceAll("<sumOfPlaceholders13And15>",
						Matcher.quoteReplacement(totalSum));
		String returnExpectedBackDate = null;

		for (int shipment = 0; shipment < enhancedPayloadActual
				.getTriggerData().get(0).getShipmentsData().size(); shipment++) {
			for (int item = 0; item < enhancedPayloadActual.getTriggerData()
					.get(0).getShipmentsData().get(shipment).getShipitems()
					.size(); item++) {
				returnExpectedBackDate = enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(shipment).getShipitems()
						.get(item).getReturnExpectedBackDate();
			}
		}

		bodyText = bodyText.replaceAll("<returnExpectedBackDate>",
				returnExpectedBackDate).replaceAll("\n", "");

		Assert.assertTrue("Expected mail Body text not found in user email",
				StringUtils.contains(bcomemailpage.getAllLabels().toLowerCase()
						.replaceAll("\n", "").trim(), bodyText.toLowerCase()
						.trim()));
	}


	@And("^i should see body text$")
	public void i_should_see_body_text() throws Throwable {

		String beforeConvertpickupCancelDate = enhancedPayloadActual
				.getTriggerData().get(0).getShipmentsData().get(0)
				.getPickupCancelDate();
		SimpleDateFormat dateFormatter = new SimpleDateFormat("EEEE, MMMM d");
		DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
		Date pickupCancelDate = (Date) formatter
				.parse(beforeConvertpickupCancelDate);
		if (getTemplateType().equals("264_14Q_BLCOM")
				|| getTemplateType().equals("264_14Q_BWEDD")
				|| getTemplateType().equals("264_14R_BLCOM")
				|| getTemplateType().equals("264_14R_BWEDD")) {

			String mailBodyText = "Your order is now ready for pickup and will be held through "
					+ dateFormatter.format(pickupCancelDate).toString()
					+ " at the store below.";

			Assert.assertEquals("Body text not match with actual",
					mailBodyText, bcomemailpage.getStaticMessage());
		} else {

			String billingFirstName = enhancedPayloadActual.getTriggerData()
					.get(0).getBillingData().getFirstName();
			String billingLastName = enhancedPayloadActual.getTriggerData()
					.get(0).getBillingData().getLastName();

			String mailBodyText = billingFirstName
					+ " "
					+ billingLastName
					+ " designated you to pick up this order and we are happy to tell you it is now ready for pickup. It will be held through "
					+ dateFormatter.format(pickupCancelDate).toString()
					+ " at the store below.";

			Assert.assertEquals("Body text not match with actual",
					mailBodyText, bcomemailpage.getStaticMessage());
		}
	}

	@Then("^i should see body text for 542_30C bops late pickup cancel:$")
	public void i_should_see_body_text_for_542_30C_bops_late_pickup_cancel(
			String bodyText) throws Throwable {
		bodyText = bodyText.replaceAll(
				"<pickupCancelDate>",
				enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getPickupCancelDate())
				.replaceAll(
						"<chargeAmt>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getPaymentData().get(0).getChargeAmt());
		Assert.assertTrue("Expected mail Body text " + bodyText
				+ "not found in user email. Actual body text:"
				+ bcomemailpage.getStaticMessage().trim(), StringUtils
				.contains(
						bcomemailpage.getAllLabels().replace("\n", "").trim(),
						bodyText.toLowerCase().replace("\n", "").trim()));
	}

	@Then("^i should see body text for 542_30D bops late pickup cancel:$")
	public void i_should_see_body_text_for_542_30D_bops_late_pickup_cancel(
			String bodyText) throws Throwable {
		bodyText = bodyText
				.replaceAll(
						"<orderNumber>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getInternetOrderNumber().getValue())
				.replaceAll(
						"<pickupCancelDate>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0)
								.getPickupCancelDate())
				.replaceAll(
						"<billingAddrfirstName>",
						Utilities.returnCamelCase(enhancedPayloadActual
								.getTriggerData().get(0).getBillingData()
								.getFirstName()))
				.replaceAll(
						"<billingAddrlastName>",
						Utilities.returnCamelCase(enhancedPayloadActual
								.getTriggerData().get(0).getBillingData()
								.getLastName()));
		Assert.assertTrue("Expected mail Body text " + bodyText
				+ "not found in user email. Actual body text:"
				+ bcomemailpage.getStaticMessage().trim(), StringUtils
				.contains(
						bcomemailpage.getAllLabels().replace("\n", "").trim(),
						bodyText.toLowerCase().replace("\n", "").trim()));
	}

	@Then("^i should see loyaltyId$")
	public void i_should_see_loyaltyId() throws Throwable {

		Assert.assertEquals(
				"Expected loyallist number not found in user email",
				enhancedPayloadActual.getTriggerData().get(0).getLoyaltyData()
						.getLoyaltyId(), bcomemailpage.loyallistId.getText());

	}

	@Then("^i should see loyalty firstName$")
	public void i_should_see_loyalty_firstName() throws Throwable {

		String bodyText = bcomemailpage.loyallistBodyText.getText();
		String firstName = Utilities.returnCamelCase(enhancedPayloadActual
				.getTriggerData().get(0).getLoyaltyData().getFirstName());

		Assert.assertTrue(
				"Loyalty firstName is not matching with the expected value",
				bodyText.contains(firstName));

	}

	@Then("^i should see firstname for return confirmation$")
	public void i_should_see_firstname_for_return_confirmation()
			throws Throwable {

		if (getTemplateType().equals("245_5N_BLCOM")) {

			Assert.assertEquals(
					"Expected First name not found in user email",
					("Dear " + enhancedPayloadActual.getTriggerData().get(0)
							.getShipmentsData().get(0).getFirstName())
							.replaceAll(" ", "") + ",", bcomemailpage
							.getFirstName().replaceAll(" ", ""));

		} else {
			Assert.assertEquals(
					"Expected First name not found in user email",
					("Dear " + enhancedPayloadActual.getTriggerData().get(0)
							.getBillingData().getFirstName()).replaceAll(" ",
							"") + ",",
					bcomemailpage.getFirstName().replaceAll(" ", ""));
		}
	}

	@And("^i should see ups  content in body text$")
	public void i_should_see_ups_content_in_body_text(String bodytext)
			throws Throwable {

		String bodyTextfromEmail = bcomemailpage.getUpsInfoInBodytext()
				.replace("\n", "").trim();

		Assert.assertTrue(
				"Expected part of body text is not matching with the Actual value",
				bodyTextfromEmail.contains(bodytext.toLowerCase()
						.replace("\n", "").trim()));

	}

	@Then("^i should see static content for fedfil sdd returned undeliverable as:$")
	public void i_should_see_static_content_for_fedfil_sdd_returned_undeliverable_as(
			String text) throws Throwable {
		String expected1 = text.split("<")[0];
		String expected2 = text.split(">")[1];
		String expected = expected1
				+ enhancedPayloadActual.getTriggerData().get(0)
						.getPaymentData().get(0).getChargeAmt() + expected2;
		i_should_see_static_contents(expected);
	}

	@Then("^i should see body text for return confirmation bill to:$")
	public void i_should_see_body_text_for_return_confirmation_bill_to(
			String bodyText) throws Throwable {

		bodyText = bodyText.replaceAll("<orderTotals.orderTotal>",
				enhancedPayloadActual.getTriggerData().get(0)
						.getOrderTotalsData().getOrderTotal());

		String bodyTextLines = bcomemailpage.getAllLabels()
				.replaceAll("\n", "").trim();

		Assert.assertTrue("body text  \" " + bodyText + " \" not exists",
				bodyTextLines.contains(bodyText.toLowerCase()));
	}

	@Then("^i should see body text for fedfil price error$")
	public void i_should_see_body_text_for_fedfil_price_error()
			throws Throwable {
		String actual = bcomemailpage.getStaticMessage().replace("\n", "")
				.trim();
		String expected = enhancedPayloadActual.getTriggerData().get(0)
				.getOrderData().getAdhocText().replace("\n", "").trim();
		Assert.assertEquals("Body text not match with actual", expected, actual);
	}

	@Then("^i should see text for unavailable item section for bops pickup reminder:$")
	public void i_should_see_text_for_unavailable_item(String unavailabeItemText)
			throws Throwable {

		String bodyTextLines = bcomemailpage.getAllLabels();
		if (unavailabeItemText.contains("<")) {
			unavailabeItemText = unavailabeItemText.replaceAll(
					"<billingAddr.firstName>",
					enhancedPayloadActual.getTriggerData().get(0)
							.getBillingData().getFirstName().toLowerCase())
					.replaceAll(
							"<billingAddr.lastName>",
							enhancedPayloadActual.getTriggerData().get(0)
									.getBillingData().getLastName()
									.toLowerCase());

		}
		Assert.assertTrue(
				"Expected text for unavailable item is not matching with the Actual value",
				bodyTextLines.contains(unavailabeItemText.toLowerCase()));

	}

	@Then("^i should see note section below store hours for bops pickup reminder:$")
	public void i_should_see_note_section_below_store_hours(String noteText)
			throws Throwable {

		noteText = noteText.replaceAll("<pickupCancelDate>",
				enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getPickupCancelDate());

		if (noteText.contains("<")) {
			noteText = noteText.replaceAll(
					"<billingAddr.firstName>",
					enhancedPayloadActual.getTriggerData().get(0)
							.getBillingData().getFirstName().toLowerCase())
					.replaceAll(
							"<billingAddr.lastName>",
							enhancedPayloadActual.getTriggerData().get(0)
									.getBillingData().getLastName()
									.toLowerCase());

		}
		Assert.assertTrue(
				"Expected note text not found in user mail",
				bcomemailpage.getAllLabels().contains(
						noteText.toLowerCase().trim()));
	}

	@And("^i should see in-store pickup questions for bops pickup reminder:$")
	public void i_should_instore_pickup_questions_for_bops_pickup_reminder(
			String inStorePickUpPhone) throws Throwable {

		String inStorePickUpPhoneNumberFromEp = inStorePickUpPhone
				+ " "
				+ enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getStoreBopsPhone()
						.replace("-", "").trim();

		String inStorePickUpPhoneNumberFromMail = bcomemailpage
				.getstoreTimeAndPhoneNos().replace("-", "").trim();

		Assert.assertTrue(
				"Phone number for in-store pickup Questions is not matching with the expected value",
				inStorePickUpPhoneNumberFromMail
						.contains(inStorePickUpPhoneNumberFromEp));

	}

	@Then("^i should see amount refunded$")
	public void i_should_see_amount_refunded() throws Throwable {
		Assert.assertEquals("Expected amount refunded not found in user email",
				"$"
						+ enhancedPayloadActual.getTriggerData().get(0)
								.getOrderTotalsData().getOrderTotal(),
				bcomemailpage.getOrderDetails().get("amount_refunded"));

	}

	@Then("^i should see return submitted date$")
	public void i_should_see_return_submitted_date() throws Throwable {
		Assert.assertEquals(
				"Return submitted date is not displaying as expected",
				enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getReturnSubmittedDate(),
				bcomemailpage.returnSubmittedDate.getText());
	}

	@Then("^i should see expected refund amount$")
	public void i_should_see_expected_refund_amount() throws Throwable {
		Assert.assertEquals(
				"Expected Refund Amount is not displaying as expected", "$"
						+ enhancedPayloadActual.getTriggerData().get(0)
								.getPaymentData().get(0).getChargeAmt(),
				bcomemailpage.expectedRefundAmount.getText());
	}

	@Then("^i should see amount returned$")
	public void i_should_see_amount_returned() throws Throwable {
		Assert.assertEquals(
				"Expected Refund Amount is not displaying as expected", "$"
						+ enhancedPayloadActual.getTriggerData().get(0)
								.getPaymentData().get(0).getChargeAmt(),
				bcomemailpage.amountRefunded.getText());
	}

	@Then("^i should see estimated refund amount$")
	public void i_should_see_estimated_refund_amount() throws Throwable {
		Assert.assertEquals(
				"Estimated Refund Amount is not displaying as expected", "$"
						+ enhancedPayloadActual.getTriggerData().get(0)
								.getPaymentData().get(0).getChargeAmt(),
				bcomemailpage.estimatedRefundAmount.getText());
	}

	@Then("^i should see refund total$")
	public void i_should_see_refund_total() throws Throwable {
		Assert.assertEquals(
				"Estimated Refund Amount is not displaying as expected", "$"
						+ enhancedPayloadActual.getTriggerData().get(0)
								.getPaymentData().get(0).getChargeAmt(),
				bcomemailpage.refundTotal.getText());
	}

	@Then("^i should see estimated refund amount as order total$")
	public void i_should_see_estimated_refund_amount_as_order_total()
			throws Throwable {
		Assert.assertEquals(
				"Estimated Refund Amount is not displaying as expected",
				"$"
						+ enhancedPayloadActual.getTriggerData().get(0)
								.getOrderTotalsData().getOrderTotal(),
				bcomemailpage.estimatedRefundAmount.getText().replaceAll(",",
						""));
	}

	@Then("^i should see original payment amount$")
	public void i_should_see_original_payment_amount() throws Throwable {
		Assert.assertEquals(
				"Original payment Amount is not displaying as expected", "$"
						+ enhancedPayloadActual.getTriggerData().get(0)
								.getPaymentData().get(0).getChargeAmt(),
				bcomemailpage.originalPayment.getText());
	}

	@Then("^i should see body text for return confirmation gift to:$")
	public void i_should_body_text_for_return_confirmation_gift_to(
			String bodyText) throws Throwable {

		String chargeAmt = "$"
				+ enhancedPayloadActual.getTriggerData().get(0)
						.getPaymentData().get(0).getChargeAmt();
		bodyText = bodyText.replaceAll("<chargeAmt>",
				Matcher.quoteReplacement(chargeAmt));

		Assert.assertTrue(
				"body text  \" " + bodyText + " \" not exists",
				bcomemailpage.getAllLabels().contains(
						bodyText.toLowerCase().trim()));
	}

	@Then("^i should see the mentioned text in the email$")
	public void i_should_see_the_mentioned_text_in_the_email(
			List<String> expectedText) throws Throwable {
try{
		Iterator<String> text = expectedText.iterator();
		while (text.hasNext()) {
			Assert.assertTrue(
					"body text  \" " + expectedText + " \" not exists",
					bcomemailpage.getAllLabels().contains(
							text.next().toLowerCase().trim()));
		}
}
catch(Error e){
	System.out.println(e.getMessage());
}

	}

	@Then("^i should see expected date as estimated ship date$")
	public void i_should_see_expected_date_as_estimated_ship_date()
			throws Throwable {
		Assert.assertEquals(
				"Expected estimated ship date not found in user email",
				enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getShipitems().get(0)
						.getExpectedDate(), getdefaultDateFormat(bcomemailpage
						.getOrderDetails().get("estimated_ship_date")));
	}

	@Then("^i should see gift message for fedfil_vgc$")
	public void i_should_see_gift_message_for_fedfil_vgc() throws Throwable {

		Assert.assertTrue(
				"Gift greeting message not exists in acutal email page",
				bcomemailpage.isTextExistsInEmailPage(enhancedPayloadActual
						.getTriggerData().get(0).getShipmentsData().get(0)
						.getGiftGreetingMsg()));
		Assert.assertTrue(
				"Gift greeting closing message not exists in acutal email page",
				bcomemailpage.isTextExistsInEmailPage(enhancedPayloadActual
						.getTriggerData().get(0).getShipmentsData().get(0)
						.getGiftClosingMsg()));
		Assert.assertTrue(
				"Gift greeting Singnature message not exists in acutal email page",
				bcomemailpage.isTextExistsInEmailPage(enhancedPayloadActual
						.getTriggerData().get(0).getShipmentsData().get(0)
						.getGiftSignatureMsg()));

	}

	@Then("^i should see the gift card text:$")
	public void i_should_see_the_gift_card_text(String expectedText)
			throws Throwable {
		Assert.assertEquals("Text is not displaying as expected", expectedText
				.toLowerCase().trim(), bcomemailpage.giftCardText.getText()
				.toLowerCase().trim());
	}

	@Then("^i should see gift card number$")
	public void i_should_see_gift_card_number() throws Throwable {
		String expectedText = enhancedPayloadActual.getTriggerData().get(0)
				.getShipmentsData().get(0).getShipitems().get(0).getVgcNbr()
				+ enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getShipitems().get(0)
						.getVgcCidNbr();
		Assert.assertEquals("Gift card number is not displaying as expected",
				expectedText, bcomemailpage.giftCardNumber.getText());
	}

	@Then("^i should see loyalty reward card amount$")
	public void i_should_see_loyalty_reward_card_amount() throws Throwable {
		String expectedAmount = "$"
				+ enhancedPayloadActual.getTriggerData().get(0)
						.getLoyaltyData().getRewardsCardAmt();
		Assert.assertEquals(
				"Loyalty reward card is not displaying as expected",
				expectedAmount, bcomemailpage.loyaltyRewardCardAmount.getText());
	}

	@Then("^i should see reward card number:$")
	public void i_should_see_reward_card_number(String expectedText)
			throws Throwable {
		String rewardCardNumber = enhancedPayloadActual.getTriggerData().get(0)
				.getLoyaltyData().getVrcBarCodeNbr()
				+ enhancedPayloadActual.getTriggerData().get(0)
						.getLoyaltyData().getRewardsCardCid();
		expectedText = expectedText.replaceAll("<loyaltyrewardcardnumber>",
				rewardCardNumber);
		Assert.assertTrue(
				"Loyalty reward card number is not displaying as expected.",
				bcomemailpage.getAllLabels().contains(
						expectedText.toLowerCase().trim()));

	}

	@Then("^i should see expire date:$")
	public void i_should_see_expire_date(String expectedText) throws Throwable {
		expectedText = expectedText.replaceAll("<expiredate>",
				enhancedPayloadActual.getTriggerData().get(0).getLoyaltyData()
						.getRewardsCardExpirationDate());
		Assert.assertTrue(
				"Loyalty card expiration date is not displaying as expected.",
				bcomemailpage.getAllLabels().contains(
						expectedText.toLowerCase().trim()));
	}

	@Then("^i should see static contents for fedfil delay first:$")
	public void i_should_see_static_contents_for_fedfil_delayfirst(
			String expectedText) throws Throwable {
		expectedText = expectedText.replaceAll("<systemCancelDate>",
				getModifiedYearFormat(enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(0).getShipitems().get(0)
						.getSystemCancelDate()));
		Assert.assertTrue(
				"Expected mail Body text " + expectedText
						+ "not found in user email. Actual body text:",
				StringUtils.contains(
						bcomemailpage.getAllLabels().replaceAll("\n", "")
								.trim(), expectedText.toLowerCase().trim()));
	}

	@Then("^i should see static contents for 254_8 fedfil delay first:$")
	public void i_should_see_static_contents_for_254_8_fedfil_delay_first(
			String expectedbodyText) throws Throwable {
		expectedbodyText = expectedbodyText.replaceAll(
				"<billingAddr.firstName>",
				enhancedPayloadActual.getTriggerData().get(0).getBillingData()
						.getFirstName().toLowerCase()).replaceAll(
				"<billingAddr.lastName>",
				enhancedPayloadActual.getTriggerData().get(0).getBillingData()
						.getLastName().toLowerCase());
		Assert.assertTrue(
				"Expected note text not found in user mail",
				bcomemailpage.getAllLabels().contains(
						expectedbodyText.toLowerCase().trim()));
	}

	@And("^i should see promo heading for offer share$")
	public void i_should_see_promo_heading_for_offer_share() throws Throwable {

		String promoHeading = enhancedPayloadActual.getTriggerData().get(0)
				.getWebsiteData().getPromoHeading();

		Assert.assertTrue(
				"promo heading  is not displaying as expected.",
				bcomemailpage.promoHeading.getText().toLowerCase()
						.contains(promoHeading.toLowerCase().trim()));

	}

	@And("^i should see promo description for offer share$")
	public void i_should_see_promo_description_for_offer_share()
			throws Throwable {

		String promoDesc = enhancedPayloadActual.getTriggerData().get(0)
				.getWebsiteData().getPromoDesc();
		Assert.assertTrue(
				"promo description  is not displaying as expected.",
				bcomemailpage.promoDesc.getText().toLowerCase()
						.contains(promoDesc.toLowerCase().trim()));

	}

	@Then("^i should see shop now button$")
	public void i_should_see_shop_now_button() throws Throwable {
		Assert.assertNotNull("Unable to Find shop now button ",
				bcomemailpage.shopNow.isDisplayed());
		Assert.assertEquals("Invalid target URL for shop now Button ", Integer
				.parseInt("200"), bcomemailpage
				.getResponseCodeByURL(bcomemailpage.shopNow
						.getAttribute("href")));
	}

	@Then("^i should see product cancelled quantity$")
	public void i_should_see_product_cancelled_quantity() throws Throwable {
		Iterator qty = bcomemailpage.getItemDetails().get("quantity")
				.iterator();
		for (int shipment = 0; shipment < enhancedPayloadActual
				.getTriggerData().get(0).getShipmentsData().size(); shipment++) {

			for (int item = 0; item < enhancedPayloadActual.getTriggerData()
					.get(0).getShipmentsData().get(shipment).getShipitems()
					.size(); item++) {

				String quantity = enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(shipment).getShipitems()
						.get(item).getCancelledQuantity().trim();

				Assert.assertEquals(
						"Expected Product Qty not match with actual",
						Integer.parseInt(quantity),
						Integer.parseInt(qty.next().toString().trim()));

			}
		}
	}

	@Then("^i should see egift card product details$")
	public void i_should_see_egift_card_product_details() throws Throwable {
		Iterator prdImg = bcomemailpage.getItemDetails()
				.get("product_image_url").iterator();
		Iterator prdImgSrc = bcomemailpage.getItemDetails()
				.get("product_image_src").iterator();
		Iterator prdName = bcomemailpage.getItemDetails().get("product_name")
				.iterator();
		Iterator prdImgURL = bcomemailpage.getItemDetails()
				.get("product_image_url").iterator();
		Iterator webId = bcomemailpage.getItemDetails().get("web_id")
				.iterator();

		for (int shipment = 0; shipment < enhancedPayloadActual
				.getTriggerData().get(0).getShipmentsData().size(); shipment++) {

			for (int item = 0; item < enhancedPayloadActual.getTriggerData()
					.get(0).getShipmentsData().get(shipment).getShipitems()
					.size(); item++) {

				String productImageUL = enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(shipment).getShipitems()
						.get(item).getImagePrimaryUrl();
				if (productImageUL != null) {
					Assert.assertEquals(
							"Invalid Product Image url",
							Integer.parseInt("200"),
							bcomemailpage.getResponseCodeByURL(prdImg.next()
									.toString().trim()));

				}

				String productSrc = enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(shipment).getShipitems()
						.get(item).getImageUrl();
				if (productSrc != null) {
					Assert.assertEquals(
							"Expected product name not match with actual",
							productSrc, prdImgSrc.next().toString().trim());

				}

				String productNameURL = enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(shipment).getShipitems()
						.get(item).getProductURL();
				if (productNameURL != null) {
					Assert.assertEquals("Product url not valid ", Integer
							.parseInt("200"), bcomemailpage
							.getResponseCodeByURL(prdImgURL.next().toString()));
				}

				String productName = enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(shipment).getShipitems()
						.get(item).getProductName();
				if (productName != null) {
					if (prdName.hasNext() && productNameURL != null) {
						Assert.assertEquals(
								"Expected product name not match with actual",
								productName, prdName.next());
					} else {
						Assert.assertTrue(
								"Product name not exist in email page",
								bcomemailpage.isTextPresent(productName));
					}
				}

				// Web ID Validation
				String lineWebId = enhancedPayloadActual.getTriggerData()
						.get(0).getShipmentsData().get(shipment).getShipitems()
						.get(item).getLineWebId();
				if (lineWebId != null) {
					String lineWebIdFromMail = (String) webId.next();
					Assert.assertEquals(
							"Expected Web Id not match with the Actual Web Id",
							lineWebId, lineWebIdFromMail.trim());
				}

			}
		}
	}

	@Then("^i should see registrant firstname$")
	public void i_should_see_registrant_firstname() throws Throwable {
		Assert.assertEquals(
				"Expected registrant1 First name not found in user email",
				"Dear "
						+ Utilities.returnCamelCase(enhancedPayloadActual
								.getTriggerData().get(0).getShipmentsData()
								.get(0).getRegistryRegistrant1()) + ",",
				bcomemailpage.getFirstName());

	}

	@Then("^i should see body text for fedfil delay second:$")
	public void i_should_body_text_for_fedfil_delay_second(String bodyText)
			throws Throwable {
		if (bodyText.contains("<systemCancelDate>")) {
			bodyText = bodyText.replaceAll("<systemCancelDate>",
					enhancedPayloadActual.getTriggerData().get(0)
							.getShipmentsData().get(0).getShipitems().get(0)
							.getSystemCancelDate());
			Assert.assertTrue(
					"body text  \" " + bodyText + " \" not exists",
					bcomemailpage.getAllLabels().replaceAll("\n", "")
							.toLowerCase()
							.contains(bodyText.toLowerCase().trim()));
		} else {

			i_should_see_static_contents_for_254_8_fedfil_delay_first(bodyText);

		}
	}

	@Then("^i should see order capture date without camel case label$")
	public void i_should_see_order_capture_date_without_camel_case_label()
			throws Throwable {
		Assert.assertEquals("Expected Order date not found in user email",
				enhancedPayloadActual.getTriggerData().get(0).getOrderData()
						.getOrderCapturedDate(), bcomemailpage
						.getOrderDetails().get("order_date"));
	}

	@Then("^i should see body text for fedfil bops order thankyou:$")
	public void i_should_see_static_contents_for_fedfil_bops_order_thankyou(
			String expectedbodyText) throws Throwable {
		expectedbodyText = expectedbodyText
				.replaceAll(
						"<shipment.firstName>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0).getFirstName()
								.toLowerCase())
				.replaceAll(
						"<shipment.lastName>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0).getLastName()
								.toLowerCase())
				.replaceAll(
						"<storeName>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0).getStoreName()
								.trim().toLowerCase());
		Assert.assertTrue(
				"Expected note text not found in user mail",
				bcomemailpage.getAllLabels().contains(
						expectedbodyText.toLowerCase().trim()));
	}

	@Then("^i should see pros product images$")
	public void i_should_see_pros_product_images() throws Throwable {

		for (int index = 0; index < bcomemailpage.prosImages.size(); index++) {
			Assert.assertEquals("Invalid image URL", Integer.parseInt("200"),
					bcomemailpage.getProsImageURLHttpStatus(index));
		}
	}

	@Then("^i should see pros product names$")
	public void i_should_see_pros_product_names() throws Throwable {
		String prosItemDesc = "";
		String[] itemName = bcomemailpage.getProsItemDetails().split("@");

		for (int item = 0; item < enhancedPayloadActual.getTriggerData().get(0)
				.getRecommendationsData().size(); item++) {

			prosItemDesc += enhancedPayloadActual.getTriggerData().get(0)
					.getRecommendationsData().get(item).getProductName()
					.toLowerCase()
					+ ";";
		}

		for (int itmDesc = 0; itmDesc < itemName.length; itmDesc++) {
			Assert.assertTrue("Expected '" + itemName[itmDesc]
					+ "' PROS product name not match with Actual '"
					+ prosItemDesc + "' PROS product names",
					prosItemDesc.contains(itemName[itmDesc]));
		}
		for (WebElement product : bcomemailpage.prosProductNames) {
			Assert.assertEquals("Invalid product name link",
					Integer.parseInt("200"),
					bcomemailpage.getResponseCodeByLinkText(product.getText()));
		}
	}

	@Then("^i should see reason for return for virtual return templates$")
	public void i_should_see_reason_for_return_for_vr_templates()
			throws Throwable {

		Assert.assertEquals(
				"Expected Reason of return not found in user email",
				enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getShipitems().get(0)
						.getReturnReason(), bcomemailpage.getOrderDetails()
						.get("reason_for_return"));

	}

	@Then("^i should see estimated refund for virtual return confirmation template$")
	public void i_should_see_estimated_refund_for_virtual_return_confirmation()
			throws Throwable {

		Assert.assertEquals(
				"Expected estimated refund not found in user email", "$"
						+ enhancedPayloadActual.getTriggerData().get(0)
								.getOrderTotalsData().getOrderTotal(),
				bcomemailpage.getOrderDetails().get("estimated_refund"));
	}

	public String getTemplateType() {

		String template = enhancedPayloadActual.getTriggerData().get(0)
				.getMailType().getValue()
				+ "_"
				+ enhancedPayloadActual.getTriggerData().get(0)
						.getMailSubType().getValue()
				+ "_"
				+ enhancedPayloadActual.getTriggerData().get(0).getBrandType()
						.getValue();
		return template;
	}

	@Then("^i should see apple payment info$")
	public void i_should_see_apple_payment_info() throws Throwable {

		Assert.assertTrue(
				"Expected payment Card Type not match with actual",
				bcomemailpage.getAllLabels().contains(
						enhancedPayloadActual.getTriggerData().get(0)
								.getPaymentData().get(0).getType()
								.toLowerCase()));

		Assert.assertTrue(
				"Expected payment Card Type not match with actual",
				bcomemailpage.getAllLabels()
						.contains(
								"$"
										+ enhancedPayloadActual
												.getTriggerData().get(0)
												.getPaymentData().get(0)
												.getChargeAmt()));

	}

	@Then("^i should see apple payment info for 360 template$")
	public void i_should_see_apple_payment_info_for_360_template()
			throws Throwable {
		Assert.assertEquals(
				"Expected Original form of tender not found in user email",
				"Apple Pay",
				bcomemailpage.getOrderDetails().get("original_form_of_tender"));
	}


   @Then("^i should see shoprunner shipping delivery method$")
   public void i_should_see_shoprunner_shipping_method()
		throws Throwable {
	
	String labelText = bcomemailpage.getAllLabels().toLowerCase().trim();
	
		for (int shipment = 0; shipment < enhancedPayloadActual
			.getTriggerData().get(0).getShipmentsData().size(); shipment++) {
			
			String shipmentType=enhancedPayloadActual
					.getTriggerData().get(0).getShipmentsData().get(shipment)
					.getShipitems().get(0).getShipmentType().trim();
			
			String fdIndicator = enhancedPayloadActual.getTriggerData().get(0)
					.getShipmentsData().get(shipment).getShipitems()
					.get(0).getFdIndicator();
			
			if(shipmentType.equals("PREMIUM") && fdIndicator != null && fdIndicator.equals("R")){
				
				shipmentType = "SHOPRUNNER FREE 2-DAY";
				
				Assert.assertTrue(
						"Shipment method is not matching with Expected value",
						labelText.contains(shipmentType.toLowerCase()));
				
			}
       }
   }

   @Then("^i should see order capture date for 233 payment_auth_failure template$")
	public void i_should_see_order_capture_date_for_233_1A_payment_auth_failure() throws Throwable {

   	SimpleDateFormat formatter = new SimpleDateFormat("yyyyy-mm-dd");
   	Date d = formatter.parse(enhancedPayloadActual.getTriggerData().get(0)
				.getOrderData().getOrderCapturedDate());
		formatter.applyPattern("mm/dd/yyyy");
		String orderDateFromEnhancedPayload=formatter.format(d).toString();
		String[] orderDates = bcomemailpage.getOrderDate().split(";");
		for (int i = 0; i < orderDates.length; i++) {
			Assert.assertEquals(
					"Expected Order date not match with Actual Order date",
					orderDateFromEnhancedPayload,
					getdefaultDateFormat(orderDates[i]));
		}
	}
   
   @Then("^i should see payment card info for 233 payment_auth_failure template$")
	public void i_should_see_payment_card_info__for_233_1A_payment_auth_failure() throws Throwable {
		
		String cardType = enhancedPayloadActual.getTriggerData().get(0)
				.getPaymentData().get(0).getType().toLowerCase();
		
		String cardNbr = enhancedPayloadActual.getTriggerData().get(0)
		.getPaymentData().get(0).getCardNbr(); 
		
		String allLabels = bcomemailpage.getAllLabels().replaceAll("\n", "").trim();
		
		Assert.assertTrue(
				"Expected payment Card Type not match with actual",
				allLabels.contains(cardType+" "+cardNbr));
		
   }

	@And("^i should see bmoney logo$")
	public void iShouldSeebMoneyLogo(){
		Assert.assertTrue("bMoney logo not displayed", bcomemailpage.isBmoneyLogoDisplayed());
	}
	@And("^i should see bMoney reward card bar code image in email$")
	public void iShoouldSeebMoneyRewardCardBarCodeLogoDisplayed(){
		Assert.assertTrue("reward card bar code image not displayed", bcomemailpage.isbMoneyBarCodeImageDisplayed());
	}
	@And(("^i should see below bMoney disclimer text in email:$"))
	public void iShouldSeeBelowMMoneyDisclimerTextInEmail(String text){
		Assert.assertTrue("bMoney disclimer text not present in email",
				text.toLowerCase().trim().contains(bcomemailpage.getbMoneyDisclimerText().replaceAll("\n", " ").trim().toLowerCase()));

	}

	@And("^i shoould see \"(.*?)\" text in bMoney email$")
	public void iShouldSeeTextInEmail(String text) throws Exception{
		String expectedText = null, actualText = null;
		switch (text) {
			case "YOU'VE EARNED":
			case "REDEEM IT FROM":
				expectedText = text;
				actualText = text.contains("REDEEM") ? bcomemailpage.getbMoneyRedeemText() : bcomemailpage.getbMoneyEarnText();
				break;
			case "<rewardCardEffectiveDate>-<rewardCardExpirationDate>":
			case "EXPIRES <rewardCardExpirationDate>":
				expectedText = text.replaceAll(
						"<rewardCardEffectiveDate>",
						getModifiedYearFormat(enhancedPayloadActual
								.getTriggerData().get(0).getLoyaltyData()
								.getRewardsCardEffectiveDate()))
						.replaceAll(
								"<rewardCardExpirationDate>",
								getModifiedYearFormat(enhancedPayloadActual
										.getTriggerData().get(0).getLoyaltyData()
										.getRewardsCardExpirationDate()))
						.replaceAll("\n", " ");
				actualText = text.contains("EXPIRES") ? bcomemailpage.getbMoneyExpDate(): bcomemailpage.getbMoneyEffAndExpDates();
				break;
			case "CID #: <cid>":
				expectedText = text.replaceAll("<cid>", enhancedPayloadActual.getTriggerData().get(0).getLoyaltyData().getRewardsCardCid());
				actualText = bcomemailpage.getbMoneyRewardCIDTxt();
				break;
			case "CARD #: <rewardCardNumber>":
				expectedText = text.replaceAll("<rewardCardNumber>", enhancedPayloadActual.getTriggerData().get(0).getLoyaltyData().getVrcBarCodeNbr());
				actualText = bcomemailpage.getbMoneyRewardCardNumberTxt();
				break;
			case "$<amount>":
				expectedText = text.replaceAll("<amount>", enhancedPayloadActual.getTriggerData().get(0).getLoyaltyData().getRewardsCardAmt());
				actualText = bcomemailpage.getbMoneyEarnAmount();
				break;
			default:
				Assert.fail("Invalid option!!");
		}

		Assert.assertTrue("Expected Text " + expectedText + " is not present in email",
				expectedText.trim().toLowerCase().contains(actualText.trim().toLowerCase()));
	}

	@Then("^i should see static content for ship address change:$")
	public void i_should_see_static_content_for_ship_address_change(String statictext)
			throws Throwable {

		int numberoflinks = StringUtils.countMatches(statictext, "<link>");
		if (numberoflinks >= 2) {
			String[] contents = statictext.split("<link>");
			for (int cnt = 1; cnt <= numberoflinks; cnt = cnt + 2) {
				Assert.assertNotNull("Link \" " + contents[cnt]
						+ " \" not exists", Browser.instance().firefoxDriver()
						.findElementByLinkText(contents[cnt]));
				;
			}
			for (int cnt = 0; cnt <= numberoflinks + 1; cnt = cnt + 2) {
				Assert.assertTrue("Static text \" " + contents[cnt]
								+ " \" not exists",
						StringUtils.contains(statictext, contents[cnt]));
			}

		} else {
			Assert.assertTrue("Static text not displaying as expected",
					StringUtils.contains(statictext, bcomemailpage
							.getShipAddChangeText().replace("\n", "")));
		}

	}

	@And("^i should see shipping address change firstname$")
	public void i_should_see_shipping_address_change_firstname() throws Throwable {
		Assert.assertEquals(
				"Expected First name not found in user email",
				"Dear "
						+ enhancedPayloadActual.getTriggerData().get(0).getWebsiteData()
						.getPromoUserFirstName() + ",",
				bcomemailpage.getShipFirstnameText());

	}

	@And("^i should see loyalty preheader:$")
	public void i_should_see_loyalty_preheader(String text) throws Throwable {
		Assert.assertEquals(
				"Loyalty associate header is missing",text,bcomemailpage.promoDesc.getText());

	}

	//
	// Static methods for common uses between mcom and bcom
	//
	// @Then("^i should see return completed date$")
	public void i_should_see_return_completed_date() throws Throwable {
		Assert.assertEquals(
				"Expected Return completed date found in user email",
				enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getShipitems().get(0)
						.getReturnReceiptDate(),
				getdefaultDateFormat(bcomemailpage.getOrderDetails().get(
						"return_date")));
	}


	//@Then("^i should see static content for mobile number change notification as:$")
	public void i_should_see_static_content_for_mobile_number_change_notification(String text) throws Throwable {

		String expected = text.replaceAll("<profilePhoneNumber>",
				enhancedPayloadActual.getTriggerData().get(0).getWebsiteData().getProfileMobileNbr());

		i_should_see_static_contents(expected);
	}

	// @And("^i should see note section:$")
	public void i_should_see_note_section(String noteText) throws Throwable {

		String noteSectionText = bcomemailpage.getNoteSection();
		String billingFname = Utilities.returnCamelCase(enhancedPayloadActual
				.getTriggerData().get(0).getBillingData().getFirstName());
		String billingLname = Utilities.returnCamelCase(enhancedPayloadActual
				.getTriggerData().get(0).getBillingData().getLastName());
		String expectedText = noteText + " " + billingFname + " "
				+ billingLname + " will not be charged for these items.";

		if ((template.get("brand").equals("blcom") || template.get("brand")
				.equals("bwedd")) && template.get("subtype").equals("14R")) {

			Assert.assertTrue(
					"Note text is not matching with the expected value",
					noteSectionText.contains(noteText));
		} else if ((template.get("brand").equals("blcom") || template.get(
				"brand").equals("bwedd"))
				&& template.get("subtype").equals("14T")) {

			Assert.assertTrue(
					"Note text is not matching with the expected value",
					noteSectionText.contains(expectedText));
		}

	}

	// @Then("^i should see refund amount$")
	public void i_should_see_refund_amount() throws Throwable {
		Assert.assertEquals("Refund Amount is not displaying as expected", "$"
						+ enhancedPayloadActual.getTriggerData().get(0)
						.getPaymentData().get(0).getChargeAmt(),
				bcomemailpage.refundAmount.getText());
	}

	// @Then("^i should see product requested quantity$")
	public void i_should_see_product_requested_quantity() throws Throwable {
		Iterator qty = bcomemailpage.getItemDetails().get("quantity")
				.iterator();
		for (int shipment = 0; shipment < enhancedPayloadActual
				.getTriggerData().get(0).getShipmentsData().size(); shipment++) {

			for (int item = 0; item < enhancedPayloadActual.getTriggerData()
					.get(0).getShipmentsData().get(shipment).getShipitems()
					.size(); item++) {

				String quantity = enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(shipment).getShipitems()
						.get(item).getReqQuantity().trim();

				/*
				 * "000000492031403361" upc verification required as part of
				 * Loyalty Decrement Project. Ref Story# B-95302,B-94720,
				 *
				 * D-65209 "000000492030504038" upc verification required as
				 * part of bwallet Project. Ref Story# B-96676
				 */


				JSONObject enhancedPayloadObject = new JSONObject(
						enhancedPayloadActual);
				String convertPayloadTostr = enhancedPayloadObject.toString();

				String upcIdFromEp = null;

				if (convertPayloadTostr.contains("upcNumber")) {

					upcIdFromEp = enhancedPayloadActual.getTriggerData().get(0)
							.getShipmentsData().get(shipment).getShipitems()
							.get(item).getUpcNumber();

				} else {

					upcIdFromEp = enhancedPayloadActual.getTriggerData().get(0)
							.getShipmentsData().get(shipment).getShipitems()
							.get(item).getUpc();

				}

				if (!(upcIdFromEp.equalsIgnoreCase("000000492031403361")||upcIdFromEp.equalsIgnoreCase("000000492030504038"))) {


					Assert.assertEquals(
							"Expected Product Qty not match with actual",
							Integer.parseInt(quantity),
							Integer.parseInt(qty.next().toString().trim()));
				}
			}
		}

	}

	// @Then("^i should see zone name in the email$")
	public void i_should_see_zone_name_in_the_email() throws Throwable {
		String labelHeaderText = bcomemailpage.getAllHeaderLabels();
		String expectedZoneName = enhancedPayloadActual.getTriggerData().get(0)
				.getOrderData().getZoneName().trim();
		Assert.assertTrue(
				"Actual zone name is not matching with expected zone name",
				labelHeaderText.contains(expectedZoneName.toLowerCase()));

	}


	// @Then("^i should see multiple tracking urls text at shipment detail level$")
	public void i_should_see_multiple_tracking_urls_text_at_shipment_detail_level()
			throws Throwable {

		Iterator tracking = bcomemailpage.getShipmentDetails()
				.get("tracking_num").iterator();
		for (int j = 0; j < bcomemailpage.getShipmentDetails()
				.get("tracking_num").size(); j++) {

			Assert.assertEquals("Multiple Tracking URL text is not displayed ",
					"Multiple tracking URLs", tracking.next().toString().trim());

			Assert.assertEquals(
					"Invalid target URL for Multiple Tracking URL text ",
					Integer.parseInt("200"),
					bcomemailpage.getResponseCodeByLinkText(tracking.next()
							.toString().trim()));
		}
	}

	// @Then("^i should see estimated refund$")
	public void i_should_see_estimated_refund() throws Throwable {

		Assert.assertEquals(
				"Expected estimated refund not found in user email", "$"
						+ enhancedPayloadActual.getTriggerData().get(0)
						.getPaymentData().get(0).getChargeAmt(),
				bcomemailpage.getOrderDetails().get("estimated_refund"));

	}

	//@And("^i should see store tomorrow's hours$")
	public void i_should_see_store_tomorrows_hours() throws Throwable {

		SimpleDateFormat timeFormatter = new SimpleDateFormat("h:mm a");
		String storeOpenTime = enhancedPayloadActual.getTriggerData().get(0)
				.getShipmentsData().get(0).getStoreHoursDetails().get(1)
				.getOpenHour();
		String storeCloseTime = enhancedPayloadActual.getTriggerData().get(0)
				.getShipmentsData().get(0).getStoreHoursDetails().get(1)
				.getCloseHour();

		DateFormat formatter = new SimpleDateFormat("h:mm");
		Date strOpentime = (Date) formatter.parse(storeOpenTime);
		Date strClosetime = (Date) formatter.parse(storeCloseTime);

		String tomorrowsHoursFromEp = "Tomorrow's Hours: "
				+ timeFormatter.format(strOpentime) + " - "
				+ timeFormatter.format(strClosetime);
		String tomorrowsHoursFromMail = bcomemailpage.getstoreTimeAndPhoneNos()
				.toLowerCase();

		Assert.assertTrue(
				"Store Tomorrow's Hours is not matching with the expected value",
				tomorrowsHoursFromMail.contains(tomorrowsHoursFromEp
						.toLowerCase()));
	}


	// @Then("^i should see order number$")
	public void i_should_see_order_number() throws Throwable {
		if (template.get("brand").equals("bstore")) {
			Assert.assertEquals(
					"Expected Order number not found in user email",
					enhancedPayloadActual.getTriggerData().get(0)
							.getReservationNumber().getValue(), bcomemailpage
							.getOrderDetails().get("order_number"));
		} else {
			Assert.assertEquals(
					"Expected Order number not found in user email",
					enhancedPayloadActual.getTriggerData().get(0)
							.getInternetOrderNumber().getValue(), bcomemailpage
							.getOrderDetails().get("order_number"));
		}
	}

	// @Then("^i should see reason for replacement$")
	public void i_should_see_reason_for_replacement() throws Throwable {
		Assert.assertEquals(
				"Expected reason for replacement not found in user email",
				enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getShipitems().get(0)
						.getReturnReason(), bcomemailpage.getOrderDetails()
						.get("reason_for_replacement"));
	}

	// @And("^i should see body text for offer share:$")
	public void i_should_see_body_text_for_offer_share(String bodytext)
			throws Throwable {

		String replyToName = enhancedPayloadActual.getTriggerData().get(0)
				.getReplyToName().getValue();
		String promoPersonalMessage = enhancedPayloadActual.getTriggerData()
				.get(0).getWebsiteData().getPromoPersonalMessage();
		bodytext = bodytext.replaceAll("<REPLY_TO_DISPLAY_NAME>", replyToName);
		if (promoPersonalMessage != null) {
			bodytext = bodytext.replaceAll("<promoPersonalMessage>",
					promoPersonalMessage);
		} else {
			bodytext = bodytext.replaceAll("<promoPersonalMessage>", "");
		}

		Assert.assertTrue("Expected mail Body text " + bodytext
				+ "not found in user email. Actual body text:"
				+ bcomemailpage.getAllLabels().trim(), StringUtils.contains(
				bcomemailpage.getAllLabels().trim(), bodytext.toLowerCase()
						.trim()));

	}

	// @Then("^i should see body text for bops pickup reminder:$")
	public void i_should_body_text_for_bops_pickup_reminder(String bodyText)
			throws Throwable {

		bodyText = bodyText.replaceAll("<billingAddr.firstName>",
				enhancedPayloadActual.getTriggerData().get(0).getBillingData()
						.getFirstName().toLowerCase());

		Assert.assertTrue("body text  \" " + bodyText + " \" not exists",
				bcomemailpage.getAllLabels().contains(bodyText.trim()));
	}

	// @Then("^i should see original payment$")
	public void i_should_see_return_original_payment() throws Throwable {

		float shipRetailAmt = Float.parseFloat(enhancedPayloadActual
				.getTriggerData().get(0).getShipmentsData().get(0)
				.getShipRetailAmount());
		float shipTaxAmt = Float.parseFloat(enhancedPayloadActual
				.getTriggerData().get(0).getShipmentsData().get(0)
				.getShipTaxAmount());

		float total = shipRetailAmt + shipTaxAmt;

		String originalPayment = "$" + new DecimalFormat("0.00").format(total);
		Assert.assertEquals("Expected original payment amount not match",
				originalPayment,
				bcomemailpage.getOrderDetails().get("original_payment"));
	}

	// @Then("^i should see \"([^\"]*)\" text$")
	public void i_should_see_text(String strText) throws Throwable {
		Assert.assertTrue(strText + "NOT existing in email page",
				bcomemailpage.isTextPresent(strText));

	}

	// @Then("^i should see static contents:$")
	public void i_should_see_static_contents(String statictext)
			throws Throwable {

		int numberoflinks = StringUtils.countMatches(statictext, "<link>");
		if (numberoflinks >= 2) {
			String[] contents = statictext.split("<link>");
			for (int cnt = 1; cnt <= numberoflinks; cnt = cnt + 2) {
				Assert.assertNotNull("Link \" " + contents[cnt]
						+ " \" not exists", Browser.instance().firefoxDriver()
						.findElementByLinkText(contents[cnt]));
				;
			}
			for (int cnt = 0; cnt <= numberoflinks + 1; cnt = cnt + 2) {
				Assert.assertTrue("Static text \" " + contents[cnt]
								+ " \" not exists",
						StringUtils.contains(statictext, contents[cnt]));
			}

		} else {
			Assert.assertTrue("Static text not displaying as expected",
					StringUtils.contains(statictext, bcomemailpage
							.getStaticMessage().replace("\n", "")));
		}

	}

	// @Then("^i should see product name url valid$")
	public void i_should_see_product_name_url_valid() throws Throwable {

		for (int shipment = 0; shipment < enhancedPayloadActual
				.getTriggerData().get(0).getShipmentsData().size(); shipment++) {
			for (int item = 0; item < enhancedPayloadActual.getTriggerData()
					.get(0).getShipmentsData().get(shipment).getShipitems()
					.size(); item++) {

				Assert.assertEquals("Product name url not valid ", Integer
						.parseInt("200"), bcomemailpage
						.getResponseCodeByLinkText(enhancedPayloadActual
								.getTriggerData().get(0).getShipmentsData()
								.get(shipment).getShipitems().get(item)
								.getProductName()));

			}
		}
	}

	// @And("^i should see store today's hours$")
	public void i_should_see_store_todays_hours() throws Throwable {

		SimpleDateFormat timeFormatter = new SimpleDateFormat("h:mm a");
		String storeOpenTime = enhancedPayloadActual.getTriggerData().get(0)
				.getShipmentsData().get(0).getStoreHoursDetails().get(0)
				.getOpenHour();
		String storeCloseTime = enhancedPayloadActual.getTriggerData().get(0)
				.getShipmentsData().get(0).getStoreHoursDetails().get(0)
				.getCloseHour();

		DateFormat formatter = new SimpleDateFormat("h:mm");
		Date strOpentime = (Date) formatter.parse(storeOpenTime);
		Date strClosetime = (Date) formatter.parse(storeCloseTime);

		String toDayHoursFromEp = "Today's Hours: "
				+ timeFormatter.format(strOpentime) + " - "
				+ timeFormatter.format(strClosetime);
		String toDayHoursFromMail = bcomemailpage.getstoreTimeAndPhoneNos()
				.toLowerCase();

		Assert.assertTrue(
				"Store Today's Hours is not matching with the expected value",
				toDayHoursFromMail.contains(toDayHoursFromEp.toLowerCase()));
	}

	// @Then("^i should see replacement date$")
	public void i_should_see_replacement_date() throws Throwable {
		Assert.assertEquals(
				"Expected Replacement date found in user email",
				enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getReturnSubmittedDate(),
				getdefaultDateFormat(bcomemailpage.getOrderDetails().get(
						"replacement_date")));
	}

	// @Given("^i trigger \"([^\"]*)\" input through csp testemail$")
	public void i_trigger_input_through_csp_testemail(String tempalteName)
			throws Throwable {
		triggerCSP(tempalteName);
	}


	// @When("^i navigate to view the email page$")
	public void i_navigate_to_view_the_email_page() throws Throwable {
		Assert.assertTrue(goToEmailPageBySourceSystemId());
	}


	// @And("^i should see body text for virtual return confirmation:$")
	public void i_should_see_body_text_for_virtual_return_confirmation(
			String bodytext) throws Throwable {

		Date date = null;
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yy");

		if (getTemplateType().equals("245_5N_BLCOM")) {

			String chargeAmt = enhancedPayloadActual.getTriggerData().get(0)
					.getPaymentData().get(0).getChargeAmt();
			String returnExpectedBackDate = getModifiedYearFormat(enhancedPayloadActual
					.getTriggerData().get(0).getShipmentsData().get(0)
					.getShipitems().get(0).getReturnExpectedBackDate());

			bodytext = bodytext.replaceAll("<returnExpectedBackDate>",
					returnExpectedBackDate)
					.replaceAll("<chargeAmt>", chargeAmt);
			Assert.assertTrue(
					"Expected mail Body text " + bodytext
							+ "not found in user email. Actual body text:"
							+ bcomemailpage.getStaticMessage().trim(),
					StringUtils.contains(
							bcomemailpage.getAllLabels().replace("\n", "")
									.trim(),
							bodytext.toLowerCase().replace("\n", "").trim()));
		}

		else {
			String orderTotal = enhancedPayloadActual.getTriggerData().get(0)
					.getOrderTotalsData().getOrderTotal();
			String returnExpectedBackDate = getModifiedYearFormat(enhancedPayloadActual
					.getTriggerData().get(0).getShipmentsData().get(0)
					.getShipitems().get(0).getReturnExpectedDate());
			bodytext = bodytext.replaceAll("<returnExpectedDate>",
					returnExpectedBackDate).replaceAll("<orderTotal>",
					orderTotal);
			Assert.assertTrue(
					"Expected mail Body text " + bodytext
							+ "not found in user email. Actual body text:"
							+ bcomemailpage.getStaticMessage().trim(),
					StringUtils.contains(
							bcomemailpage.getAllLabels().replace("\n", "")
									.trim(),
							bodytext.toLowerCase().replace("\n", "").trim()));
		}

	}

	// TODO: following are duplicate code remove it later
	// @Given("^i have an enhanced payload sent to email provider$")
	public void i_have_enhaced_payload_sent_to_email_provider()
			throws Throwable {
		waitForStatusPC(getSourceSystemID());
		getActualPayload();
	}

	// @Then("^i should see loyalty section in the email$")
	public void i_should_see_loyalty_section_in_the_email() throws Throwable {

		try{
			// Pending points
			Assert.assertEquals("Pending points is not displaying as expected",
					enhancedPayloadActual.getTriggerData().get(0).getLoyaltyData()
							.getPendingRewardEarned().replaceAll("\\.0*$", ""),
					bcomemailpage.loyaltyPendingPoints.getText().replaceAll(",", ""));

			// base points

			int expectedBasePoints = Integer.parseInt(enhancedPayloadActual
					.getTriggerData().get(0).getLoyaltyData()
					.getPendingRewardEarned().replaceAll("\\.0*$", ""))
					- Integer.parseInt(enhancedPayloadActual.getTriggerData()
					.get(0).getLoyaltyData().getBonusPendingRewardEarned()
					.replaceAll("\\.0*$", ""));

			Assert.assertEquals("Base points is not displaying as expected",
					expectedBasePoints,
					Integer.parseInt(bcomemailpage.loyaltyBasePoints.getText().replaceAll(",", "")));

			// bonus points

			int expectedBonusPoints = Integer.parseInt(enhancedPayloadActual
					.getTriggerData().get(0).getLoyaltyData()
					.getBonusPendingRewardEarned().replaceAll("\\.0*$", ""))
					- Integer.parseInt(enhancedPayloadActual.getTriggerData()
					.get(0).getLoyaltyData().getPwrptPendRewardEarned()
					.replaceAll("\\.0*$", ""));

			Assert.assertEquals("Bonus points is not displaying as expected",
					expectedBonusPoints,
					Integer.parseInt(bcomemailpage.loyaltyBonusPoints.getText().replaceAll(",", "")));

			// total point balance

			int totalPointBalance = (Integer.parseInt(enhancedPayloadActual
					.getTriggerData().get(0).getLoyaltyData().getRewardBal()
					.replaceAll("\\.0*$", "")) - Integer
					.parseInt(enhancedPayloadActual.getTriggerData().get(0)
							.getLoyaltyData().getPwrptRewardBal()
							.replaceAll("\\.0*$", "")))
					+ (Integer.parseInt(enhancedPayloadActual.getTriggerData()
					.get(0).getLoyaltyData().getAmexRewards()
					.replaceAll("\\.0*$", "")));

			Assert.assertEquals(
					"Total point balance is not displaying as expected",
					totalPointBalance,
					Integer.parseInt(bcomemailpage.loyaltyTotalPoints.getText().replaceAll(",", "")));

			// total pending points

			Assert.assertEquals(
					"Total pending points balance is not displaying as expected",
					enhancedPayloadActual.getTriggerData().get(0).getLoyaltyData()
							.getPendingRewardBal().replaceAll("\\.0*$", ""),
					bcomemailpage.loyaltyTotalPendingPoints.getText().replaceAll(",", ""));

			// first name and last name
			Assert.assertEquals(
					"First name and last name not displaying as expected",
					enhancedPayloadActual.getTriggerData().get(0).getLoyaltyData()
							.getFirstName().toLowerCase()
							+ " "
							+ enhancedPayloadActual.getTriggerData().get(0)
							.getLoyaltyData().getLastName().toLowerCase(),
					bcomemailpage.loyallistName.getText().replace(",", "")
							.toLowerCase());

			// loyalist account number

			Assert.assertEquals(
					"Loyallist account number is not displaying as expected",
					enhancedPayloadActual.getTriggerData().get(0).getLoyaltyData()
							.getKeyFOBId(),
					bcomemailpage.loyallistAccountNumber.getText());

			// loyalist email address

			Assert.assertEquals(
					"Loyallist email address is not displaying as expected",
					enhancedPayloadActual.getTriggerData().get(0).getLoyaltyData()
							.getEmailAddr(), bcomemailpage.loyallistEmail.getText());
		}
		catch(Exception e){
			System.out.println(e.getMessage());
		}
		catch(Error e){
			System.out.println(e.getMessage());
		}

	}

	//@And("^i should see item name$")
	public void i_should_see_item_name() throws Throwable {

		String[] itemName = bcomemailpage.getItemNames().split("@");

		for (int item = 0; item < enhancedPayloadActual.getTriggerData().get(0)
				.getShipmentsData().get(0).getShipitems().size(); item++) {
			Assert.assertEquals(
					"Expected product not match with Actual product name",
					enhancedPayloadActual.getTriggerData().get(0)
							.getShipmentsData().get(0).getShipitems().get(item)
							.getProductName().toLowerCase(), itemName[item]);
		}
	}

	// @Then("^i should see estimated ship date$")
	public void i_should_see_estimated_ship_date() throws Throwable {
		Assert.assertEquals(
				"Expected estimated ship date not found in user email",
				enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getShipitems().get(0)
						.getNewExpectedDate(),
				getdefaultDateFormat(bcomemailpage.getOrderDetails().get(
						"estimated_ship_date")));
	}

	// @Then("^i should see \"([^\"]*)\" button$")
	public void i_should_see_button(String buttonName) throws Throwable {
		Assert.assertNotNull("Unable to Find button " + buttonName,
				bcomemailpage.checkOrderStatusButton.isDisplayed());
		Assert.assertEquals(
				"Invalid target URL for Button " + buttonName,
				Integer.parseInt("200"),
				bcomemailpage
						.getResponseCodeByURL(bcomemailpage.checkOrderStatusButton
								.getAttribute("href")));
	}

	// @Then("^i should see body text:$")
	public void i_should_body_text(String bodyText) throws Throwable {
		String bodyTextLines = bcomemailpage.getAllLabels();
		Assert.assertTrue("body text  \" " + bodyText + " \" not exists",
				bodyTextLines.contains(bodyText.toLowerCase()));
	}

	// @Then("^i should see order capture date$")
	public void i_should_see_order_capture_date() throws Throwable {
		String[] orderDates = bcomemailpage.getOrderDate().split(";");
		for (int i = 0; i < orderDates.length; i++) {
			Assert.assertEquals(
					"Expected Order date not match with Actual Order date",
					enhancedPayloadActual.getTriggerData().get(0)
							.getOrderData().getOrderCapturedDate().trim(),
					getdefaultDateFormat(orderDates[i]));
		}
	}

	// @Then("^i should see firstname$")
	public void i_should_see_firstname() throws Throwable {

		if (template.get("source").equals("com")) {

			String firstName = Utilities.returnCamelCase(enhancedPayloadActual
					.getTriggerData().get(0).getWebsiteData()
					.getPromoUserFirstName());

			if (firstName.contains("Dear")) {

				Assert.assertEquals(
						"Expected First name not found in user email",

						"Dear " + firstName + ",", bcomemailpage.getFirstName());

			} else if (firstName.contains("Hi")) {
				Assert.assertEquals(
						"Expected First name not found in user email",

						"Hi " + firstName + ",", bcomemailpage.getFirstName());

			}



		} else if (template.get("source").equals("com")) {
			Assert.assertEquals(
					"Expected First name found in user email",
					"Dear "
							+ Utilities.returnCamelCase(enhancedPayloadActual
							.getTriggerData().get(0).getWebsiteData()
							.getSecurityFirstName()) + ",",
					bcomemailpage.getFirstName());
		} else if (getTemplateType().equals("264_14S_BLCOM")
				|| getTemplateType().equals("264_14S_BWEDD")
				|| getTemplateType().equals("264_14T_BLCOM")
				|| getTemplateType().equals("264_14T_BWEDD")) {
			Assert.assertEquals(
					"Expected First name not found in user email",

					"Dear "
							+ Utilities.returnCamelCase(enhancedPayloadActual
							.getTriggerData().get(0).getShipmentsData()
							.get(0).getFirstName()) + ",",
					bcomemailpage.getFirstName());

		} else if (getTemplateType().equals("264_14Q_BLCOM")
				|| getTemplateType().equals("264_14Q_BWEDD")
				|| getTemplateType().equals("264_14R_BLCOM")
				|| getTemplateType().equals("264_14R_BWEDD")) {

			Assert.assertEquals(
					"Expected First name not found in user email",
					("Dear " + Utilities.returnCamelCase(enhancedPayloadActual
							.getTriggerData().get(0).getBillingData()
							.getFirstName())).replaceAll(" ", "")
							+ ",",
					bcomemailpage.getFirstName().replaceAll(" ", ""));

		}else if (getTemplateType().equals("524_1A_BLCOM")
				|| getTemplateType().equals("524_1A_BSTORE")
				|| getTemplateType().equals("524_1A_BWEDD")) {
			Assert.assertEquals(
					"Expected First name not found in user email",
					("Hi" + Utilities.returnCamelCase(enhancedPayloadActual
							.getTriggerData().get(0).getBillingData()
							.getFirstName())).replaceAll(" ", "")
							+ ",",
					bcomemailpage.getFirstName().replaceAll(" ", ""));
		}else {
			Assert.assertEquals(
					"Expected First name not found in user email",
					Utilities.returnCamelCase("Dear "
							+ enhancedPayloadActual.getTriggerData().get(0)
							.getBillingData().getFirstName())
							+ ",",
					Utilities.returnCamelCase(bcomemailpage.getFirstName()));
		}

	}

	// @Then("^i should see billing address$")
	public void i_should_see_billing_address() throws Throwable {

		String billingAddress_enhancedPayload = enhancedPayloadActual.getTriggerData().get(0).getBillingData()
				.getAddress().replace(",", "").toLowerCase();

		billingAddress_enhancedPayload = billingAddress_enhancedPayload.replace("null", "");

		Assert.assertEquals("Expected Address not match with actual",
				bcomemailpage.getOrderDetails().get("billing_address")
						.replaceAll("\n", "").replace(",", "").toLowerCase(),
				billingAddress_enhancedPayload);

	}

	// @And("^i should see shipping method$")
	public void i_should_see_shipping_method() throws Throwable {

		String labelText = bcomemailpage.getAllLabels()
				.replaceAll("\\r\\n|\\r|\\n", "").replaceAll(",", "")
				.replaceAll(" ", "").toLowerCase().trim();
		String[] shipmentTypes = new String[10];

		String firstShipmentType = enhancedPayloadActual.getTriggerData()
				.get(0).getShipmentsData().get(0).getShipitems().get(0)
				.getShipmentType();
		int count = 0;
		for (int shipment = 0; shipment < enhancedPayloadActual
				.getTriggerData().get(0).getShipmentsData().size(); shipment++) {

			String jsonShippingMethod = getShipmentMethod(enhancedPayloadActual
					.getTriggerData().get(0).getShipmentsData().get(shipment)
					.getShipitems().get(0).getShipmentType().trim());

			if (jsonShippingMethod != null) {
				Assert.assertTrue(
						"Shipment method is not matching with Expected value",
						labelText.contains(getShipmentMethod(
								enhancedPayloadActual.getTriggerData().get(0)
										.getShipmentsData().get(shipment)
										.getShipitems().get(0)
										.getShipmentType()).toLowerCase()));
			} else
				count++;
		}

		if (count == enhancedPayloadActual.getTriggerData().get(0)
				.getShipmentsData().size()) {

			Assert.assertTrue(
					"Shipment method is not matching with Expected value",
					labelText.contains(getShipmentMethod(
							enhancedPayloadActual.getTriggerData().get(0)
									.getShipmentsData().get(0).getShipitems()
									.get(0).getShipmentType()).toLowerCase()));
		}

	}

	// @Then("^i should see gift message$")
	public void i_should_see_gift_message() throws Throwable {

		if (getTemplateType().equals("240_1P_BLCOM")
				|| getTemplateType().equals("240_1P_BWEDD")) {
			Assert.assertTrue("Missing expeted Text 'Gift message",
					bcomemailpage.isTextExistsInEmailPage("Gift message:"));
		} else {
			Assert.assertTrue("Missing expeted Text 'THIS ORDER IS A GIFT",
					bcomemailpage
							.isTextExistsInEmailPage("THIS ORDER IS A GIFT"));
		}

		Assert.assertTrue(
				"Gift greeting message not exists in acutal email page",
				bcomemailpage.isTextExistsInEmailPage(enhancedPayloadActual
						.getTriggerData().get(0).getShipmentsData().get(0)
						.getGiftGreetingMsg()));
		Assert.assertTrue(
				"Gift greeting closing message not exists in acutal email page",
				bcomemailpage.isTextExistsInEmailPage(enhancedPayloadActual
						.getTriggerData().get(0).getShipmentsData().get(0)
						.getGiftClosingMsg()));
		Assert.assertTrue(
				"Gift greeting Singnature message not exists in acutal email page",
				bcomemailpage.isTextExistsInEmailPage(enhancedPayloadActual
						.getTriggerData().get(0).getShipmentsData().get(0)
						.getGiftSignatureMsg()));
	}

	// @Then("^i should see credit card type$")
	public void i_should_see_credit_card_type() throws Throwable {
		String card = "Payment method:\n"
				+ enhancedPayloadActual.getTriggerData().get(0)
				.getPaymentData().get(0).getType()
				+ " "
				+ enhancedPayloadActual.getTriggerData().get(0)
				.getPaymentData().get(0).getCardNbr();
		Assert.assertEquals("Expected Order Date found in user email", card,
				bcomemailpage.getPaymentMethod());
	}

	// @Then("^i should see product name$")
	public void i_should_see_product_name() throws JsonParseException,
			JsonMappingException, IOException {
		Assert.assertTrue(
				"Expected product name not found in email page",
				bcomemailpage.isTextPresent(enhancedPayloadActual
						.getTriggerData().get(0).getShipmentsData().get(0)
						.getShipitems().get(0).getProductName()));
	}

	// @Then("^i should see multiple tracking urls text at product level$")
	public void i_should_see_multiple_tracking_urls_text_at_product_level()
			throws Throwable {

		Iterator tracking = bcomemailpage.getItemDetails().get("tracking")
				.iterator();

		for (int shipment = 0; shipment < enhancedPayloadActual
				.getTriggerData().get(0).getShipmentsData().size(); shipment++) {

			for (int item = 0; item < enhancedPayloadActual.getTriggerData()
					.get(0).getShipmentsData().get(shipment).getShipitems()
					.size(); item++) {

			}
			Assert.assertEquals("Multiple Tracking URL text is not displayed ",
					"Multiple tracking URLs", tracking.next().toString().trim());

			Assert.assertEquals(
					"Invalid target URL for Multiple Tracking URL text ",
					Integer.parseInt("200"),
					bcomemailpage.getResponseCodeByLinkText(tracking.next()
							.toString().trim()));

		}
	}

	// @Then("^i should see item image url valid$")
	public void i_shoud_see_item_image_url_valid() throws Throwable {

		int product_index = 0;
		for (int item = 0; item < enhancedPayloadActual.getTriggerData().get(0)
				.getShipmentsData().get(0).getShipitems().size(); item++) {
			Assert.assertEquals("Product image link not valid ",
					Integer.parseInt("200"),
					bcomemailpage.getItemImageURLHttpStatus(product_index));
			product_index++;
		}
	}

	// @Then("^i should see button as \"([^\"]*)\"$")
	public void i_should_see_button_as(String buttonName) throws Throwable {
		Assert.assertNotNull("Unable to Find button " + buttonName,
				bcomemailpage.getLinkByTitle(buttonName));
		Assert.assertEquals("Invalid target URL for Button " + buttonName,
				Integer.parseInt("200"), bcomemailpage
						.getResponseCodeByURL(bcomemailpage
								.getUrlByTitle(buttonName)));

	}

	// @Then("^i should see default categories:$")
	public void i_should_see_default_categories(String categories)
			throws Throwable {
		String[] categoriesArray = categories.split(",");
		for (int i = 0; i < categoriesArray.length; i++) {
			Assert.assertNotNull("Unable to Find button " + categoriesArray[i],
					bcomemailpage.getLinkByText(categoriesArray[i]));

			Assert.assertEquals("Invalid target URL for Button "
							+ categoriesArray[i], Integer.parseInt("200"),

					bcomemailpage.getResponseCodeByLinkText(categoriesArray[i]));
		}

	}

	// @Then("^i should see preheader:$")
	public void i_should_see_preheader(String preHeader) throws Throwable {
		int numberoflinks = StringUtils.countMatches(preHeader, "<link>");
		if (numberoflinks >= 2) {
			String[] contents = preHeader.split("<link>");
			for (int cnt = 1; cnt <= numberoflinks; cnt += 2) {
				Assert.assertNotNull("Link \" " + contents[cnt]
						+ " \" not exists", Browser.instance().firefoxDriver()
						.findElementByLinkText(contents[cnt]));
			}
			for (int cnt = 0; cnt < contents.length - 1; cnt += 2) {
				Assert.assertTrue("Static text \" " + contents[cnt]
								+ " \" not exists",
						StringUtils.contains(preHeader, contents[cnt]));
			}
		} else {
			Assert.assertTrue(
					"Static text \" " + preHeader + " \" not exists",
					StringUtils.contains(preHeader,
							bcomemailpage.preHeader.getText()));
		}
	}

	// @Then("^i should see reason for return$")
	public void i_should_see_reason_for_return() throws Throwable {

		Assert.assertEquals(
				"Expected Reason of return not found in user email",
				enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getShipitems().get(0)
						.getReturnReasonDescription(), bcomemailpage
						.getOrderDetails().get("reason_for_return"));
	}

	// @Then("^i should see pick up location:$")
	public void i_should_see_pick_up_location(String expectedPickupLocation)
			throws Throwable {
		expectedPickupLocation = expectedPickupLocation
				.replaceAll(
						"<storename>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0).getStoreName())
				.replaceAll(
						"<shipmentsstoreaddrline1>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0).getStoreAddrLine1())
				.replaceAll(
						"<shipmentsstoreaddrline2>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0).getStoreAddrLine2())
				.replaceAll(
						"<shipmentsstorecity>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0).getStoreCity())
				.replaceAll(
						"<shipmentsstorestate>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0).getStoreState())
				.replaceAll(
						"<shipmentsstorezipcode>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0).getStoreZipcode())
				.replaceAll(
						"<shipmentsstorephone>",
						enhancedPayloadActual.getTriggerData().get(0)
								.getShipmentsData().get(0).getStorePhone())
				.replaceAll(",", "").toLowerCase();

		Assert.assertTrue(
				"Pickup information is not displaying as expected in the email",
				StringUtils.contains(
						bcomemailpage.getAllLabels()
								.replaceAll("\\r\\n|\\r|\\n", "")
								.replaceAll(",", "").replaceAll(" ", "")
								.toLowerCase().trim(), expectedPickupLocation
								.replaceAll(" ", "").trim()));

	}

	// @And("^i should see pickup barcode$")
	public void i_should_see_pickup_barcode() throws Throwable {

		Assert.assertEquals(
				"Expected Pickup Barcode number not found in user email",
				enhancedPayloadActual.getTriggerData().get(0)
						.getShipmentsData().get(0).getPickupBarcode(),
				bcomemailpage.getpickupBarcode().trim());
	}

	// @Then("^i should see shipment firstname$")
	public void i_should_see_shipment_firstname() throws Throwable {
		Assert.assertEquals(
				"Expected First name not found in user email",

				"Dear "
						+ Utilities.returnCamelCase(enhancedPayloadActual
						.getTriggerData().get(0).getShipmentsData()
						.get(0).getFirstName()) + ",",
				bcomemailpage.getFirstName());
	}

	// @Then("^i should see billing first name$")
	public void i_should_see_billing_first_name() throws Throwable {
		Assert.assertEquals(
				"Expected First name not found in user email",

				"Dear "
						+ Utilities.returnCamelCase(enhancedPayloadActual
						.getTriggerData().get(0).getBillingData()
						.getFirstName()) + ",",
				bcomemailpage.getFirstName());
	}

	// @Given("^i wait for enhanced payload to be sent to email provider$")
	public void i_wait_for_enhanced_payload_to_be_sent_to_email_provider()
			throws Throwable {
		Thread.sleep(60000);
	}

}